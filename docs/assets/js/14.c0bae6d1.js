(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{425:function(t,s,a){t.exports=a.p+"assets/img/Lit-reactive-update-lifecycle.b22a06b9.jpg"},426:function(t,s,a){t.exports=a.p+"assets/img/Lit-reactive-update-lifecycle-ssr.5417f561.jpg"},462:function(t,s,a){"use strict";a.r(s);var n=a(18),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"lit-框架创建-web-components"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lit-框架创建-web-components"}},[t._v("#")]),t._v(" Lit 框架创建 Web Components")]),t._v(" "),n("p",[t._v("Lit 是一个 Web 工具库，它提供了一种简单的方式来创建可重用的 Web Components 标准组件或叫"),n("strong",[t._v("自定义元素")]),t._v("。")]),t._v(" "),n("p",[t._v("当前笔记都基于 Lit3，其不再支持 IE11，若要兼容 IE11 可使用 Lit2.x，Lit2 到 Lit3 几乎没有重大变更，具体可参考 "),n("a",{attrs:{href:"https://lit.dev/docs/releases/upgrade/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lit3 升级指南"),n("OutboundLink")],1),t._v("。")]),t._v(" "),n("p",[t._v("该框架包含多个常用类和工具函数（TS下还有一些简写的装饰器语法）：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("LitElement")]),t._v("：一个基类，用于创建自定义 Web Components，其是"),n("code",[t._v("ReactiveElement")]),t._v("(实现了响应式属性)的子类，而"),n("code",[t._v("ReactiveElement")]),t._v("又是原生"),n("code",[t._v("HTMLElement")]),t._v("的子类")]),t._v(" "),n("li",[n("code",[t._v("html")]),t._v("：一个模板字符串标签函数，用于在组件中创建 HTML 模板")]),t._v(" "),n("li",[n("code",[t._v("css")]),t._v("：一个模板字符串标签函数，用于在组件中创建 CSS 样式")])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("ul",[n("li",[t._v("对于 DOM 对象上的 prop 我们称为属性；")]),t._v(" "),n("li",[t._v("对于元素 tag 标签上的 attr 我们称为特性。")])]),t._v(" "),n("p",[t._v("也即是 jQuery 对象中 "),n("code",[t._v("prop()")]),t._v(" 与 "),n("code",[t._v("attr()")]),t._v(" 方法的区别。")])]),t._v(" "),n("h2",{attrs:{id:"定义元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义元素"}},[t._v("#")]),t._v(" 定义元素")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" LitElement "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 组件内容 */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义元素（此为原生API）")]),t._v("\ncustomElements"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my-element'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MyElement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h2",{attrs:{id:"渲染内容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#渲染内容"}},[t._v("#")]),t._v(" 渲染内容")]),t._v(" "),n("p",[t._v("为 Lit 组件定义一个"),n("code",[t._v("render()")]),t._v("方法，该方法返回一个 HTML 模板，该模板将被插入到组件的 shadow DOM 中，大多情况下我们使用标签函数"),n("code",[t._v("html")]),t._v("处理该模板，"),n("code",[t._v("html")]),t._v("模板内也可以嵌套其他"),n("code",[t._v("html")]),t._v("子模板或模板列表（数组，略微类似 jsx 语法）。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" LitElement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" html "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" header "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<h1>这是页头</h1>")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" footer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<footer>这是页脚</footer>")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字符串模板中可以正常插入JS表达式，注意是表达式，不是代码块，也不是只能简单的属性或方法")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" html"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<section>\n      ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("header"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n      <main>\n        <slot>\n          这里是主体插槽默认内容\n          <ul>\n            ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" html"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<li>item")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("item"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("</li>")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n          </ul>\n        </slot>\n      </main>\n      ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("footer"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n    </section>")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ncustomElements"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my-element'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MyElement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h2",{attrs:{id:"响应式属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#响应式属性"}},[t._v("#")]),t._v(" 响应式属性")]),t._v(" "),n("p",[t._v("Lit 中的响应式属性是通过声明静态属性"),n("code",[t._v("properties")]),t._v("对象实现的，它允许我们定义一个属性，当属性值发生变化时，Lit 会自动重新渲染组件。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过静态属性来定义，静态属性只能在类对象上访问(MyElement.xxx)，而不是实例对象上访问")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" properties "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每个属性都包含一些可配置项，若不配置则应保留空配置对象(表示都使用默认值)")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//! 此为公共响应式属性，原则上应该响应用户的输入而变化，组件内不应更改")]),t._v("\n    name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    age"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    sex"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//! state 设为 true 表示是内部响应式状态属性，建议以下划线`_`开头以区别于公共属性，用于组件内使用")]),t._v("\n    _counter"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" state"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在构造函数中初始化相关属性值，注意这里不是通过 this.properties 访问")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//! 不应该使用类字段语法方式声明属性，因为该方式声明的属性不是响应式的，除非本意就是不参与响应式变化")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// foo = 'default';")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("每个属性都包含一些可配置项，"),n("strong",[t._v("若不配置则应保留空配置对象")]),t._v("(表示都使用默认值)，配置项包含：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("attribute")]),t._v(": 布尔值或字符串，默认 true，表示是否将属性映射到元素标签的 attr 上（即通过 attr 来传值），若为false，则不会进行映射关联，同时会忽略"),n("code",[t._v("converter")]),t._v("、"),n("code",[t._v("reflect")]),t._v("和"),n("code",[t._v("type")]),t._v("选项，若为字符串则表示显式指定的 attr 名字（否则默认为该 prop 的全小写形式）；")]),t._v(" "),n("li",[n("code",[t._v("converter")]),t._v(": 对象或函数，默认内置转换器，用于 DOM 的 prop 与标签的 attr 间关系转换；")]),t._v(" "),n("li",[n("code",[t._v("hasChanged")]),t._v(": 函数，每当设置属性时调用，用于判断属性值是否发生变化，不指定则默认采用严格不等式进行比较(即"),n("code",[t._v("!==")]),t._v(")；")]),t._v(" "),n("li",[n("code",[t._v("noAccessor")]),t._v(": 布尔值，默认 false，表示是否禁用属性的访问器，若为 true，则属性将不会有 getter 和 setter，且无法在组件中直接访问；")]),t._v(" "),n("li",[n("code",[t._v("reflect")]),t._v(": 布尔值，默认 false，表示是否将 prop 属性值的变更同步映射到元素标签的 attr 上，可用于数据的双向绑定；")]),t._v(" "),n("li",[n("code",[t._v("state")]),t._v(": 布尔值，默认 false，表示是否将属性标记为内部状态属性，若为 true，则不会为该属性生成元素标签对应的 attribute，且不会触发属性变化事件，此时唯一可指定的额外选项只有"),n("code",[t._v("hasChange")]),t._v("，但响应式还是具备的；")]),t._v(" "),n("li",[n("code",[t._v("type")]),t._v(": 将字符串类型的 attr 特性转换为 prop 属性时应该转换为的数据类型，如果设置了"),n("code",[t._v("converter")]),t._v("选项，则会将该字段的值传给该转换器（意味着我们可以自定义一些"),n("code",[t._v("type")]),t._v("类型），若未指定"),n("code",[t._v("type")]),t._v("则默认转换器会将其视为 String 类型；")]),t._v(" "),n("li",[n("code",[t._v("useDefault")]),t._v(": 布尔值，默认 false，表示是否使用默认值，设置为 true 可在"),n("code",[t._v("reflect")]),t._v("设置为 true 时防止初始 attr 值映射到 prop 上，并在移除相应 attr 时将 prop 重置为构造函数声明时的默认值，但若非原始 Object/Array 属性，最好避免设置为 true，因为可能已不是真正的原始默认值；")])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("默认情况下，Lit 将 prop 映射为元素标签的 attr 时，其映射的 attr 名为 prop 的全小写形式，即"),n("code",[t._v("myName")]),t._v("property 会被映射为的 attr 为"),n("code",[t._v("myname")]),t._v("。")]),t._v(" "),n("p",[t._v("若想自定义对应的 attr 名字，可将上面的"),n("code",[t._v("attribute")]),t._v("配置项指定为字符串即为定义的的特性名，比如多个词的属性时我们想使用更符合标签特性命名规范的烤串格式，可将前面的属性配置为"),n("code",[t._v("{ attribute: 'my-name' }")]),t._v("，此时"),n("code",[t._v("myName")]),t._v("property就将映射为"),n("code",[t._v("my-name")]),t._v("attribute。")])]),t._v(" "),n("p",[t._v("property更改可能会触发响应式更新周期，从而导致组件重新渲染其模板，其触发顺序是：")]),t._v(" "),n("ol",[n("li",[t._v("该属性的 setter 函数调用；")]),t._v(" "),n("li",[t._v("setter 函数调用组件的"),n("code",[t._v("requestUpdate()")]),t._v("方法；")]),t._v(" "),n("li",[t._v("属性的新旧值比较；\n"),n("ul",[n("li",[t._v("默认情况下，Lit 使用严格不等式"),n("code",[t._v("!==")]),t._v("来比较属性值是否发生变化；")]),t._v(" "),n("li",[t._v("若该属性指定了"),n("code",[t._v("hasChanged")]),t._v("函数，则会将属性的旧值和新值作为参数传递给该函数以应用自定义单的比较逻辑，该函数应该返回一个布尔值，表示属性值是否发生变化；")])])]),t._v(" "),n("li",[t._v("若属性值发生变化，将异步安排更新，若已安排了更新，则仅执行最后一次更新；")]),t._v(" "),n("li",[t._v("调用组件的"),n("code",[t._v("update()")]),t._v("方法，将更改后的属性映射到 attr 中，并重新渲染组件 HTML 模板；")])]),t._v(" "),n("div",{staticClass:"custom-block danger"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("ol",[n("li",[t._v("上面配置项中"),n("code",[t._v("attribute")]),t._v("字段虽然会在 HTML 标签上创建对应的 attribute 以用于传值(并不代表 HTML 标签上一定会初始化存在该 attr，只是说此时就可以通过 attr 传值了)，但此时数据流是单向的，类似 Vue 中的"),n("code",[t._v("props")]),t._v("数据，但不同的是 Lit 中这些 prop 是可以更改，且更改后会反应到UI模板上，而不只是从 attr 上同步过来，若要体现该"),n("code",[t._v("attribute")]),t._v("的双向数据流绑定，则需要启用"),n("code",[t._v("reflect")]),t._v("选项，此时 prop 的变更才会同步到 attr 上；\n"),n("ul",[n("li",[t._v("需要注意的是这些配置都是符合HTML元素的标准表现的，而不是主流的 Vue/React 等组件的表现，HTML 元素中 attr 的变化基本都会同步到 DOM 的 prop 上，而 prop 也可以单独修改，但 prop 的修改并不一定都会同步到元素的 attr 上。比如元素的"),n("code",[t._v("id")]),t._v("，HTML 的 attr 和 DOM 的 prop 更改都会互相同步，而 input 元素的"),n("code",[t._v("value")]),t._v("就不一样了，attr 的变化会反应到 prop 上，但 prop 的变化并不会反应到 attr 上。")])])]),t._v(" "),n("li",[t._v("若改变的是一个对象或数组等引用类型的值，则不会触发更新，除非直接替换整个对象或数组，原因同 Vue2 中的响应式原理（只不过 Vue2 改写了数组的部分方法使得其可触发响应）。")])]),t._v(" "),n("p",[t._v("对于这类数据先引起组件模板更新可借鉴下面的处理方案。")])]),t._v(" "),n("h3",{attrs:{id:"变更对象和数组属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变更对象和数组属性"}},[t._v("#")]),t._v(" 变更对象和数组属性")]),t._v(" "),n("p",[t._v("要使这类值的属性响应式更新，可采用以下方案之一：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("不可变数据模式")]),t._v("：将这类数据视为不可变的，不能修改，只能产生新的，即利用旧数据生成一个新的数据来替换原来的数据，简单的数据可使用原生API解构扩展及遍历等方式生成新值，对于复杂数据结构可以使用想 "),n("a",{attrs:{href:"https://immerjs.github.io/immer/zh-CN/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Immer"),n("OutboundLink")],1),t._v(" 这样的工具库来处理。")]),t._v(" "),n("li",[n("strong",[t._v("手动触发更新")]),t._v("：直接在原数据上进行更改操作，然后调用"),n("code",[t._v("requestUpdate()")]),t._v("方法手动触发更新，当不带参数调用该方法时，该方法会安排一次更新，但不会调用"),n("code",[t._v("hasChanged")]),t._v("来判断是否值发生了变化，而是强制更新，例如："),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" properties "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 响应式属性")]),t._v("\n    data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Object "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'John'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateData")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直接修改原数据")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 手动触发更新")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" html"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n      <p>Name: ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("</p>\n      <p>Age: ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('</p>\n      <button @click="')]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateData"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('">Update Age</button>\n    ')]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("但需要注意，"),n("code",[t._v("requestUpdate()")]),t._v("只会导致当前组件更新，如果组件内有将上面的"),n("code",[t._v("data")]),t._v("传给其子组件，对子组件来说数据仍是未变化的(引用未变)，也就不会触发子组件的模板更新，要触发更新就需要每个用到该"),n("code",[t._v("data")]),t._v("数据的组件都调用"),n("code",[t._v("requestUpdate()")]),t._v("。")])])])]),t._v(" "),n("h3",{attrs:{id:"属性数据转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#属性数据转换"}},[t._v("#")]),t._v(" 属性数据转换")]),t._v(" "),n("p",[t._v("Lit 中的默认转换器可处理"),n("code",[t._v("String")]),t._v("、"),n("code",[t._v("Number")]),t._v("、"),n("code",[t._v("Boolean")]),t._v("、"),n("code",[t._v("Array")]),t._v("和"),n("code",[t._v("Object")]),t._v("类型的 prop 数据，若需要处理其他类型的数据，则可通过"),n("code",[t._v("converter")]),t._v("选项来指定一个转换器函数。使用默认转换器的方式很简单，直接在属性声明中指定"),n("code",[t._v("type")]),t._v("选项即可，若未显式指定也未通过"),n("code",[t._v("converter")]),t._v("选项自定义转换器，则默认是"),n("code",[t._v("String")]),t._v("类型。")]),t._v(" "),n("p",[t._v("若设有"),n("code",[t._v("type")]),t._v("字段，则 Lit 会将 attr 的字符串值转换为指定的"),n("code",[t._v("type")]),t._v("类型的值赋给对应的 property，注意对于欲解析为引用数据类型的字符串，Lit 是直接使用的"),n("code",[t._v("JSON.parse()")]),t._v("方法转换，所以对于 JSON 字符串必须符合 JSON 规范，否则会报错。")]),t._v(" "),n("p",[t._v("在 prop 值转为相应的 attr 字符串值中，若 prop 的值为"),n("code",[t._v("null")]),t._v("或"),n("code",[t._v("undefined")]),t._v("，则 Lit 会移除元素标签上对应的 attribute（对于"),n("code",[t._v("type")]),t._v("为"),n("code",[t._v("Boolean")]),t._v("的 property，只要其值为假就会移除 attribute），而引用类型数据在转为字符串值时，Lit 直接使用"),n("code",[t._v("JSON.stringify()")]),t._v("方法转换，所以对于非标准 JSON 字段或数据在转换中可能就会丢失。")]),t._v(" "),n("h4",{attrs:{id:"自定义属性数据转换器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义属性数据转换器"}},[t._v("#")]),t._v(" 自定义属性数据转换器")]),t._v(" "),n("p",[t._v("前面有提到可以通过配置"),n("code",[t._v("converter")]),t._v("选项来自定义转换器，该选项可以是一个"),n("strong",[t._v("对象或函数")]),t._v("。")]),t._v(" "),n("p",[t._v("当"),n("code",[t._v("converter")]),t._v("为对象时，其包含以下两个方法：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("fromAttribute(value, type)")]),t._v("：该方法用于将 attr 字符串值"),n("code",[t._v("value")]),t._v("转换为指定的"),n("code",[t._v("type")]),t._v("类型 prop 值，并应该返回转换后的值，"),n("code",[t._v("type")]),t._v("可以是我们自定义的类型，比如"),n("code",[t._v("Function")]),t._v("；")]),t._v(" "),n("li",[n("code",[t._v("toAttribute(value, type)")]),t._v("：该方法用于将 prop "),n("code",[t._v("type")]),t._v("类型值"),n("code",[t._v("value")]),t._v("转换为 attr 字符串值，并应该返回转换后的值，若返回"),n("code",[t._v("null")]),t._v("或"),n("code",[t._v("undefined")]),t._v("则会从元素标签上移除该对应的 attribute。这里"),n("code",[t._v("type")]),t._v("参数可用于自行进一步验证"),n("code",[t._v("value")]),t._v("值合法性？")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" properties "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    myProp"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      converter"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fromAttribute")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将字符串的 value 转换为 type 类型数据并返回用于映射到 prop 上")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toAttribute")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 type 类型的 value 转换为字符串值并返回用于映射到 attr 上")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("当"),n("code",[t._v("converter")]),t._v("为函数时，其就表示"),n("code",[t._v("fromAttribute")]),t._v("函数，等同于省略"),n("code",[t._v("toAttribute")]),t._v("选项的对象简写形式。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" properties "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    myProp"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("converter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于 { converter: { fromAttribute: ()=>{} }")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("若"),n("code",[t._v("converter")]),t._v("使用函数值，或省略"),n("code",[t._v("toAttribute")]),t._v("选项的对象值，则 Lit 使用内置的默认转换器来将 prop 值映射到 attr 上。")]),t._v(" "),n("p",[t._v("个人认为这对于单向数据流的 prop 没有影响，因为我们只需要单向通过 attr 传递值到内部 prop 使用，并不更改 prop 又映射到 attr 上去，就像 vue 中的"),n("code",[t._v("props")]),t._v("与"),n("code",[t._v("v-model")]),t._v("，"),n("code",[t._v("props")]),t._v("用于单向传值，而"),n("code",[t._v("v-model")]),t._v("用于双向绑定，这可以通过配置 prop 的"),n("code",[t._v("reflect")]),t._v("选项来启用双向绑定。")])]),t._v(" "),n("div",{staticClass:"custom-block danger"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("对于布尔类型的 attribute，在定义其对应的 prop 时默认值必须为"),n("code",[t._v("false")]),t._v("，若其默认值为"),n("code",[t._v("true")]),t._v("则无法通过标签将其设置为 false，因为布尔型 attr 无论是否有值，只要 attr 存在就等同于"),n("code",[t._v("true")]),t._v("。这是 Web 平台中 attr 的标准行为。")]),t._v(" "),n("p",[t._v("若该标准特性不符合组件使用场景，可以使用以下方案之一改造组件：")]),t._v(" "),n("ul",[n("li",[t._v("更改 attr 为其反义名字，使其默认值为"),n("code",[t._v("false")]),t._v("，例如，HTML表单元素使用 "),n("code",[t._v("disabled")]),t._v(" 属性（默认值为 "),n("code",[t._v("false")]),t._v("），而不是 "),n("code",[t._v("enabled")]),t._v("；")]),t._v(" "),n("li",[t._v("使用字符串类型或数值类型的 attribute，而不是布尔类型。")])])]),t._v(" "),n("h3",{attrs:{id:"attribute反射-双向绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#attribute反射-双向绑定"}},[t._v("#")]),t._v(" attribute反射(双向绑定)")]),t._v(" "),n("p",[t._v("前面提到"),n("code",[t._v("attribute")]),t._v("选项只是单向映射-"),n("strong",[t._v("attr2prop")]),t._v("，prop 虽可变化并响应内部DOM，但不会同步到 attr 上，若要实现双向绑定，则可通过配置"),n("code",[t._v("reflect")]),t._v("选项来启用将 prop 的变更同步到 attr 上-"),n("strong",[t._v("prop2attr")]),t._v("（通过 Lit 的默认转换器或自定义的转换器）。")]),t._v(" "),n("p",[t._v("单从数据交互来说，用到"),n("code",[t._v("reflect")]),t._v("选项的地方应该比较少，因为 Lit 中 attr2prop 是响应式的可触发渲染更新，而 prop 的单独修改也是响应式的可触发渲染更新，似乎"),n("code",[t._v("reflect")]),t._v("的 prop2attr 并没有必要。但在 CSS 的角度来看就不一样了，因为 attr 的变化体现在 HTML 标签上，对于 attr 的不同值可枚举的话用于 CSS 中的属性状态匹配来设置不同样式是很有用的，另一方面就是也可以适应当下 Vue 等框架组件中的"),n("code",[t._v("v-model")]),t._v("模式，方便组件外部使用同步更改的数据。")]),t._v(" "),n("p",[n("code",[t._v("reflect")]),t._v("为"),n("code",[t._v("true")]),t._v("的情况下，将"),n("code",[t._v("useDefault")]),t._v("设置为"),n("code",[t._v("true")]),t._v("会阻止 prop 的默认值在初始时同步到其相应的 attr 上，而后所有后续更改都会同步，如果该 attr 被移除，该 prop 将重置为其默认值。该效果与像元素"),n("code",[t._v("id")]),t._v("这类 attr 的行为一致，元素的"),n("code",[t._v("id")]),t._v(" prop 默认值为"),n("code",[t._v("''")]),t._v("（空字符串），并且最初 HTML 上没有"),n("code",[t._v("id")]),t._v(" attr，但如果设置了"),n("code",[t._v("id")]),t._v(" prop（即使设置为空字符串），相应的"),n("code",[t._v("id")]),t._v(" attr 也会在 HTML 上体现出来，如果移除 HTML 上"),n("code",[t._v("id")]),t._v(" attr，DOM 的"),n("code",[t._v("id")]),t._v(" prop 会被重置为初始值"),n("code",[t._v("''")]),t._v("。")]),t._v(" "),n("p",[t._v("为确保元素按预期运行并表现良好，在应用"),n("code",[t._v("reflect")]),t._v("时尽量遵循以下最佳实践：")]),t._v(" "),n("ul",[n("li",[t._v("HTML 的 attr 应作为用户的输入来源，而不应该由元素自身控制，谨慎使用 prop2attr，尽可能考虑使用"),n("code",[t._v(":state()")]),t._v("伪类和可访问性对象模型(无障碍属性)；")]),t._v(" "),n("li",[t._v("反射属性通常也应设置"),n("code",[t._v("useDefault: true")]),t._v("，因为可以防止元素自动生成用户未设置的属性，并有助于匹配预期的平台行为；")]),t._v(" "),n("li",[t._v("不建议反射数据为引用类型；")]),t._v(" "),n("li",[t._v("这些属性配置项并不会自行更改分配给响应式属性的值，有时原生元素会将 prop 限制为某些有效值，若为 prop 分配了无效值，该 prop 将改为设置为默认值。"),n("code",[t._v("useDefault: true")]),t._v("并不会这样做，它仅在移除 attr 时恢复默认值。如果想在 prop 赋值时更改 prop 值，可以定义并装饰一个自定义 prop 设置器 setter。")])]),t._v(" "),n("h3",{attrs:{id:"自定义property访问器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义property访问器"}},[t._v("#")]),t._v(" 自定义property访问器")]),t._v(" "),n("p",[t._v("默认情况下，"),n("code",[t._v("LitElement")]),t._v("类会自动为每个响应式属性定义一对 getter/setter（都属于访问器 accessor），这些 getter 和 setter 用于获取和设置属性的值，其中 setter 会自动调用"),n("code",[t._v("requestUpdate()")]),t._v("，若此时更新还未开始则立即启动更新，已开始就等下一轮。")]),t._v(" "),n("p",[t._v("自定义属性的 getter/setter：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" properties "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    prop"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  _prop "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("prop")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" oldValue "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_prop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_prop "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 手动调用更新，两个可选参数分别表示更新的 property，和该 property 的上一个值")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prop'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldValue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("prop")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_prop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("大多情况下，我们无需自定义属性访问器，只有极少数需要同步验证用户设置的任何值时可能会用到自定义设置器。若要在值更新前后做其他事，建议使用生命周期函数，比如以下两个：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("willUpdate(changedProperties)")]),t._v("：该函数在更新前调用，"),n("code",[t._v("changedProperties")]),t._v("参数为一个"),n("code",[t._v("Map")]),t._v("对象，包含即将更改的 prop 名称和其旧值键值对；")]),t._v(" "),n("li",[n("code",[t._v("updated(changedProperties)")]),t._v("：该函数在更新后调用，参数同上。")])]),t._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("当子类中存在父类已定义的响应式属性(相当于重复声明)，若未自定义访问器，Lit 默认仍会生成访问器从而覆盖父类该属性的访问器（相当于子类重新定义了，跟父类该属性的配置无关了），所以一般来说子类对该属性无特殊需求就不应该重复声明。若子类只是想更改父类上该已有属性的配置项以便适应子类的特殊需求，但并不想因此 Lit 又生成访问器覆盖父类的访问器，则可以在子类中该属性上配置"),n("code",[t._v("{ noAccessor: true }")]),t._v("来阻止 Lit 为子类该属性重新生成访问器，若要自定义访问器则无需设置改配置项。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 继承自某父类的子类中更改父类同名属性 myProp 的 type（假设父类中为 Boolean）")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" properties "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  myProp"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" noAccessor"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),n("h3",{attrs:{id:"自定义属性变更检测"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义属性变更检测"}},[t._v("#")]),t._v(" 自定义属性变更检测")]),t._v(" "),n("p",[t._v("也即是前面有提到的"),n("code",[t._v("hasChanged")]),t._v("配置项，自定义函数检测判断值是否变更，返回布尔值，若返回"),n("code",[t._v("true")]),t._v("有变更则走更新流程(响应更新的生命周期)。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" properties "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置为仅奇数认为有变化")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasChanged")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("newVal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldVal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hasChanged "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newVal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" oldVal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newVal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("newVal"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(", ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("oldVal"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(", ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("hasChanged"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" hasChanged"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"css-样式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#css-样式"}},[t._v("#")]),t._v(" CSS 样式")]),t._v(" "),n("ul",[n("li",[t._v("编程式：通过在类中声明静态属性"),n("code",[t._v("styles")]),t._v("，并赋值为通过"),n("code",[t._v("css")]),t._v("字符串标签函数处理的 CSS 代码，这样添加的 CSS 将作用到组件内的 Shadow DOM 上（前面"),n("code",[t._v("render")]),t._v("中声明的 HTML 模板，这样定义的 HTML 和 CSS 都将渲染在组件内的 shadowRoot 根节点中，不会影响外部结构和样式）；")]),t._v(" "),n("li",[t._v("声明式：通过在 HTML 模板中添加"),n("code",[t._v("<style>")]),t._v("标签创建内联样式，或使用"),n("code",[t._v("<link>")]),t._v("标签链接外部样式**(不推荐外联样式)**；")])]),t._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("编程式与声明式创建的样式虽然都有效，但两者样式的存在位置是不是一样的，编程式的最终会应用到 "),n("strong",[t._v("shadowRoot")]),t._v("，在浏览器开发者工具的 shadow tree 中是看不到的，而声明式的"),n("code",[t._v("<style>")]),t._v("标签就跟 shadow DOM 中的其他 HTML 标签一样是在 shadow tree 中可见的。")])]),t._v(" "),n("p",[t._v("编程式：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" LitElement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" css"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" html "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" styles "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" css"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n    :host {\n      color: red;\n    }\n  ")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" html"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<p>我是红色的</p>")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("这样添加的样式为静态样式，即不会根据组件外部进行动态处理的样式，适用于所有组件实例，大多情况下是添加样式的最佳方式。静态属性"),n("code",[t._v("style")]),t._v("的值可以是一个带"),n("code",[t._v("css")]),t._v("标签的模板字面量，也可以是这样的一组字面量"),n("code",[t._v("[css`xxx`, css`xxx`]")]),t._v("。")])]),t._v(" "),n("p",[t._v("声明式：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" LitElement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" html "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" html"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n      <style>\n        :host {\n          color: red;\n        }\n      </style>\n      <p>我是红色的</p>\n    ")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("静态样式中也可以使用表达式，只要是同步操作就可以，但为防止恶意代码，Lit 对字符串中的表达式进行了限制，要求这些表达式本身也必须是带"),n("code",[t._v("css")]),t._v("标签的字符串或数字，若特殊情况必须使用非"),n("code",[t._v("css")]),t._v("标签字面量的表达式，并且我们可以确定该表达式来源可信，比如自己代码定义的常量，那么也可以使用"),n("code",[t._v("unsafeCSS()")]),t._v("函数包装该表达式：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" LitElement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" css "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" primaryColor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" css"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("blue")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dangerColor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("red")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由 css 标记的表达式可直接使用，否则需要使用 unsafeCSS 函数包裹")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" styles "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" css"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n    :host { color: ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("primaryColor"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("; }\n    .danger { color: ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("unsafeCSS")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dangerColor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("; }\n  ")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("上面在静态样式中使用表达式的场景来看，似乎比较适合定义一些样式常量，但若是针对定制 UI 主题，使用 CSS 变量更加合适。")])]),t._v(" "),n("div",{staticClass:"custom-block danger"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("虽然声明式 CSS 中也可以使用表达式，但存在一些重要的限制和性能问题，故不推荐使用。")])]),t._v(" "),n("div",{staticClass:"custom-block danger"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("由于 web components 所有内容都是在 JS 中定义的，而 CSS 中使用的"),n("code",[t._v("Unicode")]),t._v("转义字符格式为反斜杠"),n("code",[t._v("\\")]),t._v("加四或六位十六进制数字(如项目符号字符"),n("code",[t._v("\\2022")]),t._v(")，格式与 JS 中废弃的八进制转义格式类似，故直接在 JS 中使用会报错，为此有两种解决方案：")]),t._v(" "),n("ol",[n("li",[t._v("使用两个反斜杠，如："),n("code",[t._v("\\\\2022")]),t._v("；")]),t._v(" "),n("li",[t._v("使用"),n("code",[t._v("\\u")]),t._v("开头，如："),n("code",[t._v("\\u2022")]),t._v("。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" styles "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" css"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n  div::before {\n    content: '\\u2022';\n  }\n")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),n("h3",{attrs:{id:"从父类继承样式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#从父类继承样式"}},[t._v("#")]),t._v(" 从父类继承样式")]),t._v(" "),n("p",[t._v("子类继承父类时包括"),n("code",[t._v("styles")]),t._v("这些静态属性本就会被继承，若不需要做样式修改就无需对样式进行声明，若子类也声明了"),n("code",[t._v("styles")]),t._v("静态属性，那就是对父类的重写覆盖，即使声明后赋了空值，此时相当于丢弃了父类的样式。若还要使用父类中的样式，但子类中又需要覆盖或定义一部分自己的样式，那就需要将父类的样式手动引用到当前子类中，此时其实不能称为继承了，而是复用（"),n("strong",[t._v("注意顺序，复用父类的应该在前面，自定义的应该后")]),t._v("）。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" css "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" MyParentElement "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./my-parent-element.js'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyParentElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" styles "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    MyParentElement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("styles"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引用父类的静态样式")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 覆盖或增加一部分自己的特殊样式")]),t._v("\n    css"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n      div {\n        color: red;\n      }\n    ")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"共享样式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#共享样式"}},[t._v("#")]),t._v(" 共享样式")]),t._v(" "),n("p",[t._v("这里的共享样式并非常规开发中的全局样式，一份就作用于所有组件，而是指多个组件都可以引用到自己内部的共性样式，实际每个组件都会生成一份，只是来源于同一处。操作方式也就是在一个单独的 JS 模块中声明带"),n("code",[t._v("css")]),t._v("标签的样式并导出供其他需要的组件导入放在自己的静态"),n("code",[t._v("styles")]),t._v("中。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// shared-styles.js")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" css "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" resetStyles "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" css"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n  p { margin: 0; }\n")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在需要引用的组件中：")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" resetStyles "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./shared-styles.js'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" styles "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    sharedStyles"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    css"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n      p { color: blue; }\n    ")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"动态样式class和style"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态样式class和style"}},[t._v("#")]),t._v(" 动态样式class和style")]),t._v(" "),n("p",[t._v("这里指的是在组件内元素上动态切换"),n("code",[t._v("class")]),t._v("和"),n("code",[t._v("style")]),t._v("行内样式，需要用到 Lit 提供的额外两个指令方法--"),n("code",[t._v("classMap()")]),t._v("和"),n("code",[t._v("styleMap()")]),t._v("，可用于处理类似 Vue 中的元素"),n("code",[t._v("class")]),t._v("和"),n("code",[t._v("style")]),t._v("属性的对象结构值。")]),t._v(" "),n("p",[t._v("用法示例：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" LitElement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" html"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" css "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" classMap "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit/directives/class-map.js'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" styleMap "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit/directives/style-map.js'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n​\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" properties "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    classes"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    styles"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" styles "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" css"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n    .someclass { border: 1px solid red; padding: 4px; }\n    .anotherclass { background-color: navy; }\n  ")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n​\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("classes "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" someclass"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" anotherclass"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("styles "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" color"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lightgreen'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fontFamily"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Roboto'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" html"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n      <div class=")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("classMap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("classes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(" style=")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("styleMap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("styles"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(">\n        Some content\n      </div>\n    ")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"主题样式风格"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主题样式风格"}},[t._v("#")]),t._v(" 主题样式风格")]),t._v(" "),n("p",[t._v("通过 CSS 变量来定义主题风格，对外暴露统一修改方案。")]),t._v(" "),n("h2",{attrs:{id:"组件生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件生命周期"}},[t._v("#")]),t._v(" 组件生命周期")]),t._v(" "),n("h3",{attrs:{id:"标准自定义元素生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#标准自定义元素生命周期"}},[t._v("#")]),t._v(" 标准自定义元素生命周期")]),t._v(" "),n("p",[t._v("此类生命周期指的是 web 标准中定义 web components 的 class 类中规范的 5 个生命周期方法（Lit 中当然也可用）。按触发顺序分别为：")]),t._v(" "),n("ol",[n("li",[n("code",[t._v("constructor()")]),t._v("：构造函数，在元素被"),n("strong",[t._v("创建或升级时")]),t._v("调用（升级指的是自定义元素已先在 DOM 中存在，而元素的定义在之后才加载的情况，也就是在 HTML5 中未知元素在未定义前会被当做普通行内元素处理，而在其定义被加载解析后就会升级为自定义元素）；\n"),n("ul",[n("li",[t._v("Lit 会在此阶段调用"),n("code",[t._v("requestUpdate()")]),t._v("请求异步更新，因此在 Lit 组件升级时，其会立即更新绑定标签上相关已设置内容；")]),t._v(" "),n("li",[t._v("应在此方法中设置 prop 的默认值")])])]),t._v(" "),n("li",[n("code",[t._v("connectedCallback()")]),t._v("：连接回调，在元素被添加到文档的 DOM 中时调用，在该函数中应设置仅在元素连接到文档时才执行的任务（类似 Vue 中 mounted 钩子），常见的是在外部对象上添加事件监听器（如 window 或 document 上），并在元素断开连接时撤销这些任务（类似 Vue 中 beforeUnmount 钩子做的事）；\n"),n("ul",[n("li",[t._v("Lit 在元素连接后启动第一个元素更新周期。为渲染做准备时，Lit 还会确保创建 "),n("code",[t._v("renderRoot")]),t._v("（通常是其 shadowRoot），一旦某个元素至少与文档连接过一次，无论该元素的连接状态如何，组件更新都将继续进行；")]),t._v(" "),n("li",[t._v("Lit 中使用该钩子时，还应该调用"),n("code",[t._v("super.connectedCallback()")]),t._v("以使用父类上的默认行为")])])]),t._v(" "),n("li",[n("code",[t._v("disconnectedCallback()")]),t._v("：断开连接回调，为上面连接回调的对立面，类似 Vue 中的 beforeUnmount 钩子（不是 unmounted，因为 unmounted 是已销毁完成），应在该回调中撤销上面创建的任务（"),n("strong",[t._v("对于事件监听器，移除创建的外部事件监听器即可，对于组件内自身 DOM 上的事件监听器虚无移除，内部的不会产生影响")]),t._v("）；\n"),n("ul",[n("li",[t._v("Lit 会在此阶段暂停响应式更新周期（Lit 独有，后面介绍），而当元素重新连接时又恢复；")]),t._v(" "),n("li",[t._v("同样，Lit 中使用该钩子时，也应该调用"),n("code",[t._v("super.disconnectedCallback()")]),t._v("以使用父类上的默认行为")])])]),t._v(" "),n("li",[n("code",[t._v("attributeChangedCallback()")]),t._v("：属性更改回调，当元素的某个"),n("code",[t._v("observedAttributes")]),t._v("被观察属性发生变化时调用；\n"),n("ul",[n("li",[t._v("Lit 使用此回调将 attr 的更改同步到响应式 prop。Lit 还会自动设置元素的 "),n("code",[t._v("observedAttributes")]),t._v(" 数组，以匹配组件的响应式属性列表；")]),t._v(" "),n("li",[t._v("由于 Lit 内部的响应式封装，很少需要手动调用这个方法")])])]),t._v(" "),n("li",[n("code",[t._v("adoptedCallback()")]),t._v("：当组件移动到新文档时调用，很少使用，且该钩子没有 Polyfill 实现。\n"),n("ul",[n("li",[t._v("Lit 对此回调没有默认行为")])])])]),t._v(" "),n("h3",{attrs:{id:"响应式更新生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#响应式更新生命周期"}},[t._v("#")]),t._v(" 响应式更新生命周期")]),t._v(" "),n("p",[t._v("这部分的生命周期钩子是 Lit 组件专有的，当响应式属性发生变化或显式调用 "),n("code",[t._v("requestUpdate()")]),t._v(" 方法时，会触发响应式更新周期。Lit 异步执行更新，因此属性变化会被批量处理 —— 如果在请求更新后但更新开始前有更多属性发生变化，所有这些变化都会在同一次更新中被捕获。")]),t._v(" "),n("p",[t._v("其生命周期流程图大概如下（"),n("code",[t._v("Pre-Update")]),t._v("更新前、"),n("code",[t._v("Update")]),t._v("更新中、"),n("code",[t._v("Post-Update")]),t._v("更新后）：")]),t._v(" "),n("p",[t._v("客户端渲染：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(425),alt:"客户端响应式更新生命周期流程图"}})]),t._v(" "),n("p",[t._v("服务端渲染（其不会像上面客户端渲染调用整个更新周期，另当前 Lit 的服务端渲染正在开发中，并不完善）：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(426),alt:"服务端渲染响应式更新生命周期流程图"}})]),t._v(" "),n("p",[t._v("其中的大多"),n("strong",[t._v("响应式更新方法")]),t._v("(主要图中的 "),n("strong",[t._v("Update 阶段")]),t._v(")接收一个包含已更改属性的 Map（称为"),n("code",[t._v("changedProperties")]),t._v("）。Map 的键是 prop 名，其值是该 prop 之前的属性值，而对于新属性值可直接通过"),n("code",[t._v("this.prop")]),t._v(" 或 this['prop'] 获取到，注意该 Map 对象包含了当前更新周期中所有发生更改的属性键值对。")]),t._v(" "),n("p",[t._v("在"),n("strong",[t._v("更新期间")]),t._v("（图中 Update 阶段，包括 "),n("code",[t._v("render()")]),t._v(" 方法）更改属性仍会更新 changedProperties 映射，但"),n("strong",[t._v("不会触发新的子更新周期")]),t._v("，可通过 changedProperties Map 在当前一轮更新周期中的后续钩子中获知相应属性也已发生变化以用于计算其他值等（同时后续钩子中也能通过上面提到的"),n("code",[t._v("this.prop")]),t._v(" 或 this['prop'] 获取到变更后的新值）。而在 "),n("code",[t._v("render()")]),t._v(" 之后（即图中 "),n("strong",[t._v("Post-Update 阶段")]),t._v("，如 "),n("code",[t._v("updated()")]),t._v(" 方法中）更改属性"),n("strong",[t._v("会触发一个新的更新周期")]),t._v("，并且已更改的属性会添加到一个新的 changedProperties 映射中，以供"),n("strong",[t._v("下一个周期使用")]),t._v("。")]),t._v(" "),n("h4",{attrs:{id:"触发更新"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#触发更新"}},[t._v("#")]),t._v(" 触发更新")]),t._v(" "),n("p",[t._v("此为 "),n("strong",[t._v("Pre-Update")]),t._v(" 更新前阶段。在响应式属性发生变化或手动调用"),n("code",[t._v("requestUpdate()")]),t._v("时，会触发更新，由于更新是异步执行的，因此在执行更新前(进入"),n("code",[t._v("Update")]),t._v("阶段前)发生的任何及所有更改只会导致一次"),n("strong",[t._v("单一更新")]),t._v("。")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("hasChange()")]),t._v("识别为存在变化，当设置响应式属性时，Lit 内部会调用用户配置的该方法或内置该默认方法，返回"),n("code",[t._v("true")]),t._v("则会自动触发"),n("code",[t._v("requestUpdate()")]),t._v("；")]),t._v(" "),n("li",[n("code",[t._v("requestUpdate()")]),t._v("请求更新，除了上面的组件自动调用，也可手动调用该方法强制更新，这对于渲染非响应式属性产生的其他内容变化更新很有用；\n"),n("ul",[n("li",[t._v("该方法的参数可选，可传入一个属性名及其旧值，它们将以键值对形式被存在 changedProperties Map 中，若我们为某个属性提供了自定义的 getter 和 setter 方法，这可能会很有用，因为这样我们在某些生命周期的 changedProperties 参数中就可以获取到这里提供的值做其他用。")])])])]),t._v(" "),n("h4",{attrs:{id:"执行更新"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行更新"}},[t._v("#")]),t._v(" 执行更新")]),t._v(" "),n("p",[t._v("此为 "),n("strong",[t._v("Update")]),t._v(" 更新中阶段。进入该阶段执行更新时，会调用"),n("code",[t._v("performUpdate()")]),t._v("方法（无需手动调用），此方法又会自动去调用其他一些生命周期方法。"),n("strong",[t._v("进入该阶段后又产生的新的所有属性更改不会又进入一个子更新周期，变更仍会反映到 changedProperties Map 中，供用户在这一轮生命周期中当前产生新更改的钩子之后剩余的生命周期方法中获取变化以手动作出响应（比如依赖其他属性的计算属性），同时也能充实例"),n("code",[t._v("this")]),t._v("上获取到相应属性变更后的新值。")])]),t._v(" "),n("ol",[n("li",[n("code",[t._v("shouldUpdate()")]),t._v("钩子用于确定是否进行更新周期")])]),t._v(" "),n("ul",[n("li",[t._v("参数：前面提到的 changedProperties Map")]),t._v(" "),n("li",[t._v("返回值：布尔值，若返回"),n("code",[t._v("true")]),t._v("则继续更新（内部默认调用时会返回"),n("code",[t._v("true")]),t._v("），若返回"),n("code",[t._v("false")]),t._v("则不会调用本轮周期中其余的更新回调，但 Post-Update 阶段中的"),n("code",[t._v("updateComplete")]),t._v("回调的 Promise 状态仍会被标记为 resolved；")]),t._v(" "),n("li",[t._v("通过该钩子可以自行控制哪些属性变化会导致更新，同时可通过 changedProperties Map 来比较新旧值。"),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("changedProperties")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 仅在 prop1 发生了变化时允许更新")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" changedProperties"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("has")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prop1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[n("code",[t._v("willUpdate()")]),t._v("即将更新时钩子，会在最终更新前调用，以计算更新期间所需的依赖性值")])]),t._v(" "),n("ul",[n("li",[t._v("参数：changedProperties Map，返回值")]),t._v(" "),n("li",[t._v("通过该钩子来计算依赖于其他属性且在 Update 阶段中后续钩子中要使用的属性值（看作 Vue 中的 watch 或 computed 理解）"),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("willUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("changedProperties")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于一些复杂数据，仅在相应依赖属性变化时才计算更新新值")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("changedProperties"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("has")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'firstName'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" changedProperties"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("has")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lastName'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里属于 Update 阶段中产生的属性更改，其不会触发新的子更新周期，")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 但变更会反映到 changedProperties Map 中，以供剩余钩子检测该变化或应用更改后的新值")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sha "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeSHA")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstName"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastName"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里用到了 this.sha 新值")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" html"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("SHA: ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sha"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[n("code",[t._v("update()")]),t._v("更新 DOM 钩子，会将 prop 值同步到 attr，并调用 "),n("code",[t._v("render()")]),t._v(" 钩子更新组件内部 DOM\n"),n("ul",[n("li",[t._v("参数：changedProperties Map，无需返回值")]),t._v(" "),n("li",[n("strong",[t._v("需要调用父类 "),n("code",[t._v("super.update()")]),t._v(" 原始方法，否者不会同步 attr 和更新 DOM")])]),t._v(" "),n("li",[t._v("通常情况下，无需重写该钩子")])])]),t._v(" "),n("li",[n("code",[t._v("render()")]),t._v("渲染钩子，为组件提供 HTML 模板，由"),n("code",[t._v("update()")]),t._v("内部调用\n"),n("ul",[n("li",[t._v("参数：无")]),t._v(" "),n("li",[t._v("返回值：HTML 模板")])])])]),t._v(" "),n("h4",{attrs:{id:"完成更新"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#完成更新"}},[t._v("#")]),t._v(" 完成更新")]),t._v(" "),n("p",[t._v("在调用"),n("code",[t._v("update()")]),t._v("将更改渲染到组件的 DOM 后，便可以使用该阶段（Post-Update）的这些钩子对组件最新 DOM 执行操作了，"),n("strong",[t._v("此阶段中新的属性更改会进入下一轮新的更新生命周期")]),t._v("。")]),t._v(" "),n("ol",[n("li",[n("code",[t._v("firstUpdated()")]),t._v(" DOM 首次更新完成钩子，注意仅在组件 DOM 首次更新后，且浏览器有机会进行绘制前调用，不会每轮更新周期都调用\n"),n("ul",[n("li",[t._v("参数：changedProperties Map，无需返回值")]),t._v(" "),n("li",[t._v("可在该钩子中处理组件 DOM 创建后的一次性工作，比如聚焦于内部某特定渲染元素，或向内部某元素添加"),n("code",[t._v("ResizeObserver")]),t._v("或"),n("code",[t._v("IntersectionObserver")]),t._v("等监听，听上去似乎与前面自定义元素的标准生命周期钩子"),n("code",[t._v("connectedCallback()")]),t._v("类似，实际不同的是"),n("code",[t._v("firstUpdated()")]),t._v("应该在"),n("code",[t._v("connectedCallback()")]),t._v("之后，其包括了相关 attr 和 prop 初始化同步后的 DOM 状态，而"),n("code",[t._v("connectedCallback()")]),t._v("只是自定义元素 DOM 插入了文档，相关属性可能还没同步好。")])])]),t._v(" "),n("li",[n("code",[t._v("updated()")]),t._v(" DOM 更新完成钩子，元素的 DOM 已更新并渲染时调用，每轮组件更新完成都会调用\n"),n("ul",[n("li",[t._v("参数：changedProperties Map，无需返回值")]),t._v(" "),n("li",[t._v("可在该钩子中处理 DOM 更新后的工作，如动画。")])])]),t._v(" "),n("li",[n("code",[t._v("updateComplete")]),t._v(" 这是一个表示更新完成状态的 Promise 对象，当一轮更新周期完成后没有待处理的更新了，其状态就会变成 resolved，并返回 "),n("code",[t._v("true")]),t._v("，若更新周期中存在为捕获处理的错误，则其庄涛就会变为 rejected\n"),n("ul",[n("li",[t._v("注意，"),n("strong",[t._v("其不是一个函数调用然后返回 Promise，而本身就是一个 Promise")]),t._v("，所以不能函数方式调用；")]),t._v(" "),n("li",[t._v("可通过 "),n("code",[t._v("await this.updateComplete")]),t._v(" 来等待更新周期完成，也可设置回调"),n("code",[t._v("this.updateComplete.then(() => { ... })")]),t._v("等待完成；")]),t._v(" "),n("li",[t._v("更新完成状态并不会等待其任何子元素也完成其更新(若存在子元素依赖父元素变化的情况，注意这里是 light DOM 中的子元素，不是 shadow DOM 中的父子元素)，如果自定义其状态变化行为，可通过重写"),n("code",[t._v("getUpdateComplete()")]),t._v("方法实现；")]),t._v(" "),n("li",[t._v("需要知道元素更新何时完成的情况主要有以下几种：\n"),n("ul",[n("li",[t._v("编写组件内测试时，对组件 DOM 进行断言(判断组件DOM状态满足某条件否)前等待"),n("code",[t._v("updateComplete")]),t._v("状态，若断言依赖于组件所有后代元素，则等待"),n("code",[t._v("requestAnimationFrame")]),t._v("更好，因为 Lit 默认适用微任务队列，该队列在动画帧之前被清空；")]),t._v(" "),n("li",[t._v("需要测量 DOM 尺寸以实现特定布局时，以保证 DOM 状态已最新且稳定，但若要等待所有后代元素也完成更新，建议使用"),n("code",[t._v("ResizeObserver")]),t._v(" API 更可靠；")]),t._v(" "),n("li",[t._v("渲染完成后从组件派发自定义事件时，这样可说的事件监听器获取到组件的完整渲染状态。")])])])])])]),t._v(" "),n("h4",{attrs:{id:"更新周期中的错误处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#更新周期中的错误处理"}},[t._v("#")]),t._v(" 更新周期中的错误处理")]),t._v(" "),n("p",[t._v("若在 Update 更新中阶段的生命周期钩子内有未捕获的异常，则会导致"),n("code",[t._v("updateComplete")]),t._v("状态变为 rejected，好的做法是若在生命周期钩子中能预见可能抛出异常的代码，则最好都使用"),n("code",[t._v("try/catch")]),t._v("进行捕获处理。若未预处可能的异常，在等待"),n("code",[t._v("updateComplete")]),t._v(" Promise 状态时，建议也使用"),n("code",[t._v("try/catch")]),t._v("进行捕获处理。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateComplete"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  cnosole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("warning")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'处理错误'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("在某些情况下，代码可能在意想不到的地方抛出错误，作为一种备选方案，可在"),n("code",[t._v("window")]),t._v("对象上添加"),n("code",[t._v("unhandledrejection")]),t._v("事件（"),n("strong",[t._v("JS原生事件")]),t._v("，用于捕获所有未"),n("code",[t._v("catch()")]),t._v("的 Promise rejected 异常）来捕获这些问题。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onunhandledrejection")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("warning")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'处理未捕获的 Promise rejected'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或")]),t._v("\nwindow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'unhandledrejection'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("warning")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'处理未捕获的 Promise rejected'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h4",{attrs:{id:"不常用的更新生命周期钩子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不常用的更新生命周期钩子"}},[t._v("#")]),t._v(" 不常用的更新生命周期钩子")]),t._v(" "),n("p",[t._v("本节介绍一般不常会去自定义重写的更新生命周期钩子，其中有前面提到但未详细介绍的，也有未提到的。")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("scheduleUpdate()")]),t._v("：调度更新钩子，在即将执行更新时(指进入 Update 阶段)被调用，默认情况下其会立即调用"),n("code",[t._v("performUpdate()")]),t._v("，重写该钩子可用于解除对主渲染/事件线程的阻塞（设法延后更新时机），但须注意"),n("strong",[t._v("别忘了调用原始钩子")]),n("code",[t._v("super.scheduleUpdate()")]),t._v(" "),n("ul",[n("li",[t._v("例如将更新安排在下一帧绘制后进行，若更新开销大，这样做可减少卡顿"),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里使用 async/await 声明为异步函数隐式返回一个 Promise，也可以声明为普通函数显式返回一个 Promise")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("scheduleUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resolve"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("scheduleUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用原始钩子，以衔接内部处理流程")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])]),t._v(" "),n("li",[n("code",[t._v("performUpdate()")]),t._v("：执行更新钩子，在调度更新后被调用，实现响应式更新循环，并调用其他钩子，调用该钩子可立即处理待处理的更新，通常情况下无需这样做，但极少需要同步更新的情况下可以这么操作。\n"),n("ul",[n("li",[t._v("若没有待处理的更新，可先调用"),n("code",[t._v("requestUpdate()")]),t._v("，然后调用"),n("code",[t._v("performUpdate()")]),t._v("来强制进行同步更新")])])]),t._v(" "),n("li",[n("code",[t._v("hasUpdated")]),t._v("：是否更新过，此为普通属性，而非钩子方法也非 Promise 对象，若组件至少更新过一次，则该属性将返回"),n("code",[t._v("true")]),t._v("，可在任何生命周期钩子中访问该属性，以便仅在组件尚未更新过时执行操作；")]),t._v(" "),n("li",[n("code",[t._v("getUpdateComplete()")]),t._v("：获取更新完成状态的 Promise 对象，其返回的 Promise 会同步给"),n("code",[t._v("updateComplete")]),t._v("属性，若要在"),n("code",[t._v("updateComplete")]),t._v(" Promise resolved 前等待其他条件，则可重写该方法。\n"),n("ul",[n("li",[t._v("比如除了原本的仅等待当前组件本身 DOM 更新完成外，还要求等待其子元素也更新完成，才算当前组件真的更新完成时：")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUpdateComplete")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUpdateComplete")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等待当前组件 shadow DOM 更新完成")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// await Promise.all(this.shadowRoot.querySelectorAll('*').map(el => el.updateComplete));")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_myChild"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateComplete"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等待某个子元素也更新完成")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回原始结果，以保持原有行为")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),n("h3",{attrs:{id:"外部生命周期钩子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#外部生命周期钩子"}},[t._v("#")]),t._v(" 外部生命周期钩子")]),t._v(" "),n("p",[t._v("该部分主要针对控制器和装饰器，可根据需要查看原文档。")]),t._v(" "),n("h2",{attrs:{id:"shadow-dom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#shadow-dom"}},[t._v("#")]),t._v(" Shadow DOM")]),t._v(" "),n("p",[t._v("Lit 将组件渲染到 "),n("code",[t._v("renderRoot")]),t._v(" 属性上，默认情况下其就是自定义元素的 "),n("code",[t._v("shadowRoot")]),t._v("，其是一个"),n("code",[t._v("ShadowRoot")]),t._v("实例，而"),n("code",[t._v("ShadowRoot")]),t._v("的原型指向"),n("code",[t._v("DocumentFragment")]),t._v("，因此可将其理解成组件内的"),n("code",[t._v("document")]),t._v("，也就具备一些共同的 API。")]),t._v(" "),n("h3",{attrs:{id:"插槽"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#插槽"}},[t._v("#")]),t._v(" 插槽")]),t._v(" "),n("p",[t._v("默认情况下，若一个元素有 shadow tree，则其在 light DOM 中的后端元素根本不会渲染，只有该元素单的 shadow tree 中设置了"),n("code",[t._v("<slot>")]),t._v("插槽，且 light DOM 中有正确传入插槽中的后代元素才会被渲染。")]),t._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("传入插槽的元素，其自身不会被移动到 shadow DOM 中，只是如同"),n("code",[t._v("<slot>")]),t._v("的子元素一样被渲染在相应位置，其在 light DOM 中位置是保持原样的，跟其他普通元素的使用关系一样。")])]),t._v(" "),n("p",[t._v("要访问分配到"),n("code",[t._v("shadowRoot")]),t._v("中插槽的后代元素，可使用 web 标准的 "),n("code",[t._v("slot.assignedNodes()")]),t._v(" 或 "),n("code",[t._v("slot.assignedElements()")]),t._v(" 方法以及 "),n("code",[t._v("slotchange")]),t._v(" 事件。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过一个 getter 获取插槽的子元素")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("_slottedChildren")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" slot "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shadowRoot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'slot'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" slot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assignedElements")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 slotchange 事件处理函数获取插槽的子元素")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleSlotchange")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" childNodes "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assignedNodes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里示例提取所有被插槽化子项的文本内容。")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("allText "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" childNodes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("node")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("textContent "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("textContent "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" html"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<div>\n      <slot @slotchange=")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("handleSlotchange"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("></slot>\n      <p>插槽文本内容：")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("allText"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("</p>\n    </div>")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("传入的元素仅在插槽渲染后才会获取到，若需要在启动时访问这些元素，则需要等待 "),n("code",[t._v("firstUpdated")]),t._v(" 或 "),n("code",[t._v("updated")]),t._v("，若想在渲染发生变化时访问这些元素，则可以使用 "),n("code",[t._v("slotchange")]),t._v(" 事件。")])]),t._v(" "),n("h3",{attrs:{id:"自定义渲染根节点-shadowroot"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义渲染根节点-shadowroot"}},[t._v("#")]),t._v(" 自定义渲染根节点 shadowRoot")]),t._v(" "),n("p",[t._v("每个原生自定义元素都有一个 shadow root 根节点，Lit 组件自然也不例外，默认情况下，"),n("code",[t._v("LitElement")]),t._v(" 创建一个开放的 "),n("code",[t._v("shadowRoot")]),t._v(" 并在其中进行渲染，有两种方式自定义"),n("code",[t._v("LitElement")]),t._v("的根节点渲染方式：")]),t._v(" "),n("ul",[n("li",[t._v("设置静态属性"),n("code",[t._v("shadowRootOptions")]),t._v("，以更改"),n("code",[t._v("LitElement")]),t._v("内创建"),n("code",[t._v("shadowRoot")]),t._v("时的配置项；")]),t._v(" "),n("li",[t._v("自定义"),n("code",[t._v("createRenderRoot()")]),t._v("方法，并返回希望模板渲染到的根节点。")])]),t._v(" "),n("h4",{attrs:{id:"设置静态属性shadowrootoptions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#设置静态属性shadowrootoptions"}},[t._v("#")]),t._v(" 设置静态属性"),n("code",[t._v("shadowRootOptions")])]),t._v(" "),n("p",[t._v("自定义渲染根的最简单方法是设置 "),n("code",[t._v("shadowRootOptions")]),t._v(" 静态属性。"),n("code",[t._v("createRenderRoot()")]),t._v(" 的默认实现会在创建组件的 shadow root 时，将 "),n("code",[t._v("shadowRootOptions")]),t._v(" 作为选项参数传递给原生 "),n("code",[t._v("attachShadow()")]),t._v(" 方法，因此可以通过设置该选项来定制 ShadowRootInit 字典中允许的任何选项，例如 "),n("code",[t._v("mode")]),t._v(" 和 "),n("code",[t._v("delegatesFocus")]),t._v("，可参考原生 "),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/attachShadow",target:"_blank",rel:"noopener noreferrer"}},[t._v("Element.attachShadow()"),n("OutboundLink")],1),t._v(" 方法的参数。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DelegatesFocus")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因该属性为静态属性，因为只能通过类来访问原始配置参数，这里增加了使用焦点委托的选项")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" shadowRootOptions "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("LitElement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shadowRootOptions"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delegatesFocus"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h4",{attrs:{id:"自定义createrenderroot-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义createrenderroot-方法"}},[t._v("#")]),t._v(" 自定义"),n("code",[t._v("createRenderRoot()")]),t._v("方法")]),t._v(" "),n("p",[n("code",[t._v("createRenderRoot()")]),t._v(" 的默认实现会创建一个开放的（"),n("code",[t._v("mode")]),t._v("为"),n("code",[t._v("open")]),t._v("）shadow root 影子根节点，并将 "),n("code",[t._v("styles")]),t._v(" 静态属性设置的样式添加到该节点，若要自定义"),n("code",[t._v("createRenderRoot()")]),t._v("方法，需要返回一个希望渲染到的位置根节点。")]),t._v(" "),n("p",[t._v("例如将模板内容作为自定义元素的子元素渲染到 light DOM 中，则直接在"),n("code",[t._v("createRenderRoot()")]),t._v("方法，返回"),n("code",[t._v("this")]),t._v("对象：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LightDom")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" html"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n      <p>Custom rendering without shadow DOM (note, styling leaks in).</p>\n    ")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createRenderRoot")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时使用该 shadow host 元素本身作为模板渲染根节点，因此上面的 HTML 模板会直接渲染在 light DOM 中当前自定义元素内，而不是其 shadow DOM 中")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"custom-block danger"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("不建议将模板渲染到子元素而不是 shadow DOM 中，这样实际是渲染在 light DOM 中，样式作用域无法生效，还会受外部样式影响，也无法将元素组合到内部 DOM 中，失去了组件的封装性。")])]),t._v(" "),n("h2",{attrs:{id:"事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[t._v("#")]),t._v(" 事件")]),t._v(" "),n("p",[t._v("在 Lit 中，除了标准的事件监听 web API "),n("code",[t._v("addEventListener()")]),t._v("外，还可在 HTML 模板中使用类似 Vue 中的声明式添加事件监听器的方式，即 "),n("code",[t._v('@eventname="${this._handlerName}"')]),t._v("，包括自定义事件（但仅限 Lit 组件的HTML模板中使用该语法），其会在模板"),n("code",[t._v("render()")]),t._v("渲染时被转换，若给"),n("code",[t._v("@eventname")]),t._v("传递的值为"),n("code",[t._v("null")]),t._v("或"),n("code",[t._v("undefined")]),t._v("或空内容，则会移除该事件监听器。注意这里的"),n("code",[t._v("eventname")]),t._v("事件名是事件声明的原始格式，不能做任何转换，如自定义的事件名为"),n("code",[t._v("my-event")]),t._v("，那就只能写成"),n("code",[t._v("@my-event")]),t._v("（虽然内部一般不会监听自定义事件，一般都是派发给外部使用的）。")]),t._v(" "),n("h3",{attrs:{id:"自定义事件监听器选项"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义事件监听器选项"}},[t._v("#")]),t._v(" 自定义事件监听器选项")]),t._v(" "),n("p",[t._v("若要在声明式事件注册中自定义事件监听器选项（即"),n("code",[t._v("addEventListener()")]),t._v("方法的第三个参数为对象时提供的可选配置项--"),n("code",[t._v("capture/once/passive/signal")]),t._v("），则需要向模板中的事件监听器表达式传递一个对象的方式来配置需要的选项，且该对象必须有一个"),n("code",[t._v("handleEvent()")]),t._v("方法表示时间处理器(注意使用箭头函数使"),n("code",[t._v("this")]),t._v("指向正确)，而其他选项就是前面提到的可选配置项。")]),t._v(" "),n("h3",{attrs:{id:"向元素本身或showroot添加事件监听器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#向元素本身或showroot添加事件监听器"}},[t._v("#")]),t._v(" 向元素本身或showRoot添加事件监听器")]),t._v(" "),n("ul",[n("li",[t._v("由于自定义元素类声明中的"),n("code",[t._v("this")]),t._v("即指向每个元素实例本身，故直接在"),n("code",[t._v("constructor()")]),t._v("向"),n("code",[t._v("this")]),t._v("添加事件监听也就是在 shadow host 上添加了，此时与在 light DOM 中该自定义元素上添加的事件一样，即使事件触发是 shadow DOM 中的元素，其事件源"),n("code",[t._v("event.target")]),t._v("也是指向 shadow host 元素本身，等同于"),n("code",[t._v("event.currentTarget")]),t._v("当前绑定事件的元素，不会深入 shadow DOM 中的元素（注意light DOM 中传入的插槽内容并不属于 shadow DOM 内容）；")]),t._v(" "),n("li",[t._v("在"),n("code",[t._v("shadowRoot")]),t._v("(Lit 中也可以使用"),n("code",[t._v("renderRoot")]),t._v(")上添加的事件监听器属于 shadow DOM 内部监听，其事件源"),n("code",[t._v("event.target")]),t._v("会指向实际触发的元素（事件委托机制），包括 shadow DOM 和 light DOM 传入的插槽内容。由于"),n("code",[t._v("shadowRoot")]),t._v("需要组件更新渲染后才有实际值，所以添加事件监听应该在"),n("code",[t._v("connectedCallback()")]),t._v("或"),n("code",[t._v("firstUpdated()")]),t._v("中进行，或是在"),n("code",[t._v("createRenderRoot()")]),t._v("中获取"),n("code",[t._v("shadowRoot")]),t._v("并添加事件监听（须注意返回原始根节点）。")])]),t._v(" "),n("h3",{attrs:{id:"给-shadow-dom-之外内容添加事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#给-shadow-dom-之外内容添加事件"}},[t._v("#")]),t._v(" 给 shadow DOM 之外内容添加事件")]),t._v(" "),n("p",[t._v("向组件 shadow DOM 之外的任何对象添加事件监听器（如"),n("code",[t._v("window")]),t._v("、"),n("code",[t._v("document")]),t._v("或 light DOM 中的某元素），则应该在"),n("code",[t._v("connectedCallback()")]),t._v("中添加，并在"),n("code",[t._v("disconnectedCallback()")]),t._v("中移除。在"),n("code",[t._v("connectedCallback()")]),t._v("(而不是"),n("code",[t._v("constructor()")]),t._v("或"),n("code",[t._v("firstUpdated()")]),t._v("等)中添加事件可确保若组件从 DOM 中断开连接并随后重新连接时，其将重新创建对应的事件监听器（实际前面括号提到的钩子中也行，但还是需要在"),n("code",[t._v("disconnectedCallback()")]),t._v("中做相应的移除，但从配对关系上来说肯定"),n("code",[t._v("connectedCallback()")]),t._v("更合适）。"),n("strong",[t._v("对于这种向组件外部对象添加事件的情况，其处理函数应该只处理与当前组件实例相关的事务，避免处理公共事务，除非能保证同一界面视图下只用到一次该组件，否则就会导致重复添加公共事务处理事件。")])]),t._v(" "),n("h3",{attrs:{id:"派发自定义事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#派发自定义事件"}},[t._v("#")]),t._v(" 派发自定义事件")]),t._v(" "),n("p",[t._v("所有 DOM 节点都可以使用标准 Web API "),n("code",[t._v("dispatchEvent()")]),t._v(" 方法派发自定义事件，自定义事件根据不同使用场景可以通过"),n("code",[t._v("Event")]),t._v("类或其标准子类（如"),n("code",[t._v("CustomEvent/MouseEvent/KeyboardEvent/InputEvent")]),t._v("等等）以及在这些标准类上自行扩展的子类来创建，并通过传递第二个参数来配置事件对象。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不携带数据，仅做通知的事件用 Event 类")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" event "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my-event'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" bubbles"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" composed"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要自定义数据的事件用 CustomEvent 类，其提供 detail 选项传递数据，可在监听器回调中的事件对象上获取到传递的该属性数据")]),t._v("\nevent "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomEvent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my-event'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" composed"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" detail"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// （不推荐）基于某事件类型创建，其提供了与该类型事件匹配的额外数据配置项，特别是在覆盖标准事件时，这会很有用，例如自定义 click 事件时，但其可能导致标准事件的一些默认浏览器行为丢失，比如自定义 focus 可能导致元素本身的聚焦表现失效")]),t._v("\nevent "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MouseEvent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my-event'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" composed"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建子类扩展更多接口")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyEvent")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Event")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my-event'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" composed"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自定义接口")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nevent "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyEvent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'自定义接口'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 派发事件")]),t._v("\nel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatchEvent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("在实例化自定义事件时，对于第二个配置对象中的部分选项需要重点注意（全量可查看 MDN 文档）：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("bubbles")]),t._v("：是否允许冒泡，允许冒泡就可以被祖先元素捕获该事件（包括 shadow DOM 和 light DOM 中，light DOM 中还需要事件可以穿透），默认 false；")]),t._v(" "),n("li",[n("code",[t._v("composed")]),t._v("：是否允许事件穿透到 shadow DOM 之外，默认 false，允许穿透则可以在外部 light DOM 中捕获该事件，否则即使允许冒泡也只能在 shadow DOM 中冒泡，"),n("strong",[t._v("须注意该选项与冒泡选项没有必然联系，其只是决定是否将内部派发的事件提升到 shadow host 这一层，即决定了是否可以在该自定义元素本身上捕获该自定义事件，其对于冒泡的影响就是是否阻断在 light DOM 中继续冒泡，即使不冒泡，允许穿透则该自定义元素自身上也还是可以捕获该事件")]),t._v("；")])]),t._v(" "),n("p",[t._v("若派发的自定义事件仅允许 light DOM 中该 shadow host 元素自身捕获，则从 shadow DOM 内派发的事件选项应该设置为"),n("code",[t._v("{ omposed: true }")]),t._v("（若某些情况下事件回调中仍要知道实际事件源，可调用"),n("code",[t._v("event.composedPath()")]),t._v("方法，其返回事件穿透路径中所有节点数组，第一个就是最底层的元素，包括 shadow DOM 中的元素），而直接从 shadow host "),n("code",[t._v("this")]),t._v(" 上派发的则事件选项都使用默认值"),n("code",[t._v("false")]),t._v("（因此时直接在宿主元素自身上，也就不在乎是否冒泡和穿透了），从组件的封装性上来说，这是最合适的。")]),t._v(" "),n("p",[t._v("像 Vue 中一样，常规标准事件一般不需要去自定义，除非是将内部子元素上的特殊事件转移到组件本身上，比如将内部 "),n("code",[t._v("<input>")]),t._v(" 的 "),n("code",[t._v("input")]),t._v(" 事件转移到对外的自定义元素 "),n("code",[t._v("<my-input>")]),t._v(" 上。")]),t._v(" "),n("h3",{attrs:{id:"事件派发时机"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件派发时机"}},[t._v("#")]),t._v(" 事件派发时机")]),t._v(" "),n("p",[t._v("事件应该在响应用户交互或组件状态的异步变化时触发，不应该在开发者自己控制组件 attr 或 prop 值进行的变化时触发，这符合 web 标准元素的工作方式，因为直接设置这些值时，值的变化都掌握在开发者自己手里，而不是外部用户的行为，开发者可以在更改值时同步调用后续处理逻辑，而不是去触发事件，比如用户在原生"),n("code",[t._v("<input>")]),t._v("中完成输入后会触发"),n("code",[t._v("change")]),t._v("事件，但若是开发者代码直接设置的"),n("code",[t._v("<input>")]),t._v("的"),n("code",[t._v("value")]),t._v("属性，则不会触发"),n("code",[t._v("change")]),t._v("事件，但开发者可以自己同步调用 change 逻辑，而对于组件封装清空输入这种边界状态的变化，若我们提供了"),n("code",[t._v("clear")]),t._v("方法或快捷操作，可以去手动触发"),n("code",[t._v("change")]),t._v("事件。"),n("strong",[t._v("一般来说，一个自定义事件应该是在其他标准事件的监听回调中被派发的。")])]),t._v(" "),n("p",[t._v("通常，一个事件若是跟元素的状态表现有关，那该事件应该仅在元素更新并渲染后触发，以便符合用户视觉感受，因为响应式是异步的，数据变化后若与视觉状态变化间隔长，一开始就派发了事件，用户感知就会错位，而且事件回调也可能不能立即获取到 DOM 的最新状态。这种情况下，可以在更改数据状态后但派发事件前等待组件的 "),n("code",[t._v("updateComplete")]),t._v(" Promise resolve。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("_notify")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("open "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("open"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等 DOM 更新完成")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateComplete"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatchEvent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomEvent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'toggle'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" detail"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("open "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("open "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'opened'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'closed'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatchEvent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"事件派发器与监听器间的通信"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件派发器与监听器间的通信"}},[t._v("#")]),t._v(" 事件派发器与监听器间的通信")]),t._v(" "),n("p",[t._v("这两者间的通信主要指：派发器即调用"),n("code",[t._v("dispatchEvent()")]),t._v("后获取监听器回传的数据，监听器即事件回调中获取派发器传递的数据。")]),t._v(" "),n("ul",[n("li",[t._v("一种实现方式就是在事件上公开API，这样两边都可以访问和修改改API，比如两者都可以通过更改事件对象上的"),n("code",[t._v("datail")]),t._v("字段来传递数据，也可以像前面提到扩展事件接口来传递。")]),t._v(" "),n("li",[t._v("还有一种就是通过"),n("code",[t._v("preventDefault()")]),t._v("方法，调用该方法表示不执行事件的默认操作，且事件的"),n("code",[t._v("defaultPrevented")]),t._v("属性会同步变为`true，然后调度器中也可以根据该属性的状态来判断是否执行默认操作。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调度器向监听器传递数据较常见，前面也有提到方式，这里主要给出监听器向调度器回传数据的示例")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 假设这是 shadow DOM 中的一个标准事件的回调函数")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("_tryChange")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" event "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomEvent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'checked'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自定义传给外部监听器的数据")]),t._v("\n      detail"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" message"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatchEvent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 外部监听器是否阻止默认行为")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("defaultPrevented"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("preventDefault")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的 detail 数据也可以被外部监听器修改，从而反应到派发器这里（只要是同步操作）")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("detail"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"综合示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#综合示例"}},[t._v("#")]),t._v(" 综合示例")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" properties "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    count"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    _btnNum"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" state"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_btnNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造时即可在 host 上绑定事件")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'host'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("localName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模板字符串中属性值的引号可省略（html 标记函数会正确处理）")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" html"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n      <p>\n        <button @click=")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_increment"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(">点我</button>\n        <button @click=")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_handleObj"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(">剩余 ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_btnText"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(" 次</button>\n        <span>点击次数：")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("</span>\n      </p>\n    ")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createRenderRoot")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// createRenderRoot() 中是最早给 shadowRoot/renderRoot 属性赋值的位置")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由于我们并不是要重新生成渲染根节点，只是要获取根节点使用而已，故调用原始创建渲染根节点方法")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" root "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createRenderRoot")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 shadowRoot 上注册事件")]),t._v("\n    root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'createRenderRoot'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("localName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意必须返回渲染根节点")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("firstUpdated")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// showRoot/renderRoot 上添加监听事件须保障该属性已赋值，且不要放在 update() 中，否则会每次更新都添加一次监听")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shadowRoot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'shadowRoot'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("localName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为确保用户能看到组件后再添加监听器，可等待浏览器完成绘制后异步添加事件监听")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resolve"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("renderRoot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'img'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'load'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'async firstUpdated'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("_increment")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 派发自定义事件")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatchEvent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomEvent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'increment'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" detail"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  _handleObj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里使用箭头函数，否则 this 未指向当前组件实例")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("handleEvent")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_btnNum"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("_increment")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    once"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{458:function(t,s,a){"use strict";a.r(s);var n=a(18),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"lit-框架创建-web-components"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lit-框架创建-web-components"}},[t._v("#")]),t._v(" Lit 框架创建 Web Components")]),t._v(" "),a("p",[t._v("Lit 是一个 Web 工具库，它提供了一种简单的方式来创建可重用的 Web Components 标准组件或叫"),a("strong",[t._v("自定义元素")]),t._v("。")]),t._v(" "),a("p",[t._v("该框架包含多个常用类和工具函数（TS下还有一些简写的装饰器语法）：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("LitElement")]),t._v("：一个基类，用于创建自定义 Web Components，其是"),a("code",[t._v("ReactiveElement")]),t._v("(实现了响应式属性)的子类，而"),a("code",[t._v("ReactiveElement")]),t._v("又是原生"),a("code",[t._v("HTMLElement")]),t._v("的子类")]),t._v(" "),a("li",[a("code",[t._v("html")]),t._v("：一个模板字符串标签函数，用于在组件中创建 HTML 模板")]),t._v(" "),a("li",[a("code",[t._v("css")]),t._v("：一个模板字符串标签函数，用于在组件中创建 CSS 样式")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("ul",[a("li",[t._v("对于 DOM 对象上的 prop 我们称为属性；")]),t._v(" "),a("li",[t._v("对于元素 tag 标签上的 attr 我们称为特性。")])]),t._v(" "),a("p",[t._v("也即是 jQuery 对象中 "),a("code",[t._v("prop()")]),t._v(" 与 "),a("code",[t._v("attr()")]),t._v(" 方法的区别。")])]),t._v(" "),a("h2",{attrs:{id:"定义元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义元素"}},[t._v("#")]),t._v(" 定义元素")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" LitElement "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 组件内容 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义元素（此为原生API）")]),t._v("\ncustomElements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my-element'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MyElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"渲染内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染内容"}},[t._v("#")]),t._v(" 渲染内容")]),t._v(" "),a("p",[t._v("为 Lit 组件定义一个"),a("code",[t._v("render()")]),t._v("方法，该方法返回一个 HTML 模板，该模板将被插入到组件的 shadow DOM 中，大多情况下我们使用标签函数"),a("code",[t._v("html")]),t._v("处理该模板。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" LitElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字符串模板中可以正常插入JS表达式（即${}插入）")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" html"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<p>Hello from my template.</p>")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ncustomElements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my-element'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MyElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"响应式属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应式属性"}},[t._v("#")]),t._v(" 响应式属性")]),t._v(" "),a("p",[t._v("Lit 中的响应式属性是通过声明静态属性"),a("code",[t._v("properties")]),t._v("对象实现的，它允许我们定义一个属性，当属性值发生变化时，Lit 会自动重新渲染组件。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过静态属性来定义，静态属性只能在类对象上访问(MyElement.xxx)，而不是实例对象上访问")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" properties "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每个属性都包含一些可配置项，若不配置则应保留空配置对象(表示都使用默认值)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//! 此为公共响应式属性，原则上应该响应用户的输入而变化，组件内不应更改")]),t._v("\n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    sex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//! state 设为 true 表示是内部响应式状态属性，建议以下划线`_`开头以区别于公共属性，用于组件内使用")]),t._v("\n    _counter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" state"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在构造函数中初始化相关属性值，注意这里不是通过 this.properties 访问")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//! 不应该使用类字段语法方式声明属性，因为该方式声明的属性不是响应式的，除非本意就是不参与响应式变化")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// foo = 'default';")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("每个属性都包含一些可配置项，"),a("strong",[t._v("若不配置则应保留空配置对象")]),t._v("(表示都使用默认值)，配置项包含：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("attribute")]),t._v(": 布尔值或字符串，默认 true，表示是否将属性映射到元素标签的 attr 上（即通过 attr 来传值），若为false，则不会进行映射关联，同时会忽略"),a("code",[t._v("converter")]),t._v("、"),a("code",[t._v("reflect")]),t._v("和"),a("code",[t._v("type")]),t._v("选项，若为字符串则表示显式指定的 attr 名字（否则默认为该 prop 的全小写形式）；")]),t._v(" "),a("li",[a("code",[t._v("converter")]),t._v(": 对象或函数，默认内置转换器，用于 DOM 的 prop 与标签的 attr 间关系转换；")]),t._v(" "),a("li",[a("code",[t._v("hasChanged")]),t._v(": 函数，每当设置属性时调用，用于判断属性值是否发生变化，不指定则默认采用严格不等式进行比较(即"),a("code",[t._v("!==")]),t._v(")；")]),t._v(" "),a("li",[a("code",[t._v("noAccessor")]),t._v(": 布尔值，默认 false，表示是否禁用属性的访问器，若为 true，则属性将不会有 getter 和 setter，且无法在组件中直接访问；")]),t._v(" "),a("li",[a("code",[t._v("reflect")]),t._v(": 布尔值，默认 false，表示是否将 prop 属性值的变更同步映射到元素标签的 attr 上，可用于数据的双向绑定；")]),t._v(" "),a("li",[a("code",[t._v("state")]),t._v(": 布尔值，默认 false，表示是否将属性标记为内部状态属性，若为 true，则不会为该属性生成元素标签对应的 attribute，且不会触发属性变化事件，此时唯一可指定的额外选项只有"),a("code",[t._v("hasChange")]),t._v("，但响应式还是具备的；")]),t._v(" "),a("li",[a("code",[t._v("type")]),t._v(": 将字符串类型的 attr 特性转换为 prop 属性时应该转换为的数据类型，如果设置了"),a("code",[t._v("converter")]),t._v("选项，则会将该字段的值传给该转换器（意味着我们可以自定义一些"),a("code",[t._v("type")]),t._v("类型），若未指定"),a("code",[t._v("type")]),t._v("则默认转换器会将其视为 String 类型；")]),t._v(" "),a("li",[a("code",[t._v("useDefault")]),t._v(": 布尔值，默认 false，表示是否使用默认值，设置为 true 可在"),a("code",[t._v("reflect")]),t._v("设置为 true 时防止初始 attr 值映射到 prop 上，并在移除相应 attr 时将 prop 重置为构造函数声明时的默认值，但若非原始 Object/Array 属性，最好避免设置为 true，因为可能已不是真正的原始默认值；")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("默认情况下，Lit 将 prop 映射为元素标签的 attr 时，其映射的 attr 名为 prop 的全小写形式，即"),a("code",[t._v("myName")]),t._v("property 会被映射为的 attr 为"),a("code",[t._v("myname")]),t._v("。")]),t._v(" "),a("p",[t._v("若想自定义对应的 attr 名字，可将上面的"),a("code",[t._v("attribute")]),t._v("配置项指定为字符串即为定义的的特性名，比如多个词的属性时我们想使用更符合标签特性命名规范的烤串格式，可将前面的属性配置为"),a("code",[t._v("{ attribute: 'my-name' }")]),t._v("，此时"),a("code",[t._v("myName")]),t._v("property就将映射为"),a("code",[t._v("my-name")]),t._v("attribute。")])]),t._v(" "),a("p",[t._v("property更改可能会触发响应式更新周期，从而导致组件重新渲染其模板，其触发顺序是：")]),t._v(" "),a("ol",[a("li",[t._v("该属性的 setter 函数调用；")]),t._v(" "),a("li",[t._v("setter 函数调用组件的"),a("code",[t._v("requestUpdate()")]),t._v("方法；")]),t._v(" "),a("li",[t._v("属性的新旧值比较；\n"),a("ul",[a("li",[t._v("默认情况下，Lit 使用严格不等式"),a("code",[t._v("!==")]),t._v("来比较属性值是否发生变化；")]),t._v(" "),a("li",[t._v("若该属性指定了"),a("code",[t._v("hasChanged")]),t._v("函数，则会将属性的旧值和新值作为参数传递给该函数以应用自定义单的比较逻辑，该函数应该返回一个布尔值，表示属性值是否发生变化；")])])]),t._v(" "),a("li",[t._v("若属性值发生变化，将异步安排更新，若已安排了更新，则仅执行最后一次更新；")]),t._v(" "),a("li",[t._v("调用组件的"),a("code",[t._v("update()")]),t._v("方法，将更改后的属性映射到 attr 中，并重新渲染组件 HTML 模板；")])]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("ol",[a("li",[t._v("上面配置项中"),a("code",[t._v("attribute")]),t._v("字段虽然会在 HTML 标签上创建对应的 attribute 以用于传值(并不代表 HTML 标签上一定会初始化存在该 attr，只是说此时就可以通过 attr 传值了)，但此时数据流是单向的，类似 Vue 中的"),a("code",[t._v("props")]),t._v("数据，但不同的是 Lit 中这些 prop 是可以更改，且更改后会反应到UI模板上，而不只是从 attr 上同步过来，若要体现该"),a("code",[t._v("attribute")]),t._v("的双向数据流绑定，则需要启用"),a("code",[t._v("reflect")]),t._v("选项，此时 prop 的变更才会同步到 attr 上；\n"),a("ul",[a("li",[t._v("需要注意的是这些配置都是符合HTML元素的标准表现的，而不是主流的 Vue/React 等组件的表现，HTML 元素中 attr 的变化基本都会同步到 DOM 的 prop 上，而 prop 也可以单独修改，但 prop 的修改并不一定都会同步到元素的 attr 上。比如元素的"),a("code",[t._v("id")]),t._v("，HTML 的 attr 和 DOM 的 prop 更改都会互相同步，而 input 元素的"),a("code",[t._v("value")]),t._v("就不一样了，attr 的变化会反应到 prop 上，但 prop 的变化并不会反应到 attr 上。")])])]),t._v(" "),a("li",[t._v("若改变的是一个对象或数组等引用类型的值，则不会触发更新，除非直接替换整个对象或数组，原因同 Vue2 中的响应式原理（只不过 Vue2 改写了数组的部分方法使得其可触发响应）。")])]),t._v(" "),a("p",[t._v("对于这类数据先引起组件模板更新可借鉴下面的处理方案。")])]),t._v(" "),a("h3",{attrs:{id:"变更对象和数组属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变更对象和数组属性"}},[t._v("#")]),t._v(" 变更对象和数组属性")]),t._v(" "),a("p",[t._v("要使这类值的属性响应式更新，可采用以下方案之一：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("不可变数据模式")]),t._v("：将这类数据视为不可变的，不能修改，只能产生新的，即利用旧数据生成一个新的数据来替换原来的数据，简单的数据可使用原生API解构扩展及遍历等方式生成新值，对于复杂数据结构可以使用想 "),a("a",{attrs:{href:"https://immerjs.github.io/immer/zh-CN/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Immer"),a("OutboundLink")],1),t._v(" 这样的工具库来处理。")]),t._v(" "),a("li",[a("strong",[t._v("手动触发更新")]),t._v("：直接在原数据上进行更改操作，然后调用"),a("code",[t._v("requestUpdate()")]),t._v("方法手动触发更新，当不带参数调用该方法时，该方法会安排一次更新，但不会调用"),a("code",[t._v("hasChanged")]),t._v("来判断是否值发生了变化，而是强制更新，例如："),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" properties "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 响应式属性")]),t._v("\n    data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Object "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'John'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直接修改原数据")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 手动触发更新")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" html"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n      <p>Name: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("</p>\n      <p>Age: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('</p>\n      <button @click="')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateData"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('">Update Age</button>\n    ')]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("但需要注意，"),a("code",[t._v("requestUpdate()")]),t._v("只会导致当前组件更新，如果组件内有将上面的"),a("code",[t._v("data")]),t._v("传给其子组件，对子组件来说数据仍是未变化的(引用未变)，也就不会触发子组件的模板更新，要触发更新就需要每个用到该"),a("code",[t._v("data")]),t._v("数据的组件都调用"),a("code",[t._v("requestUpdate()")]),t._v("。")])])])]),t._v(" "),a("h3",{attrs:{id:"属性数据转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性数据转换"}},[t._v("#")]),t._v(" 属性数据转换")]),t._v(" "),a("p",[t._v("Lit 中的默认转换器可处理"),a("code",[t._v("String")]),t._v("、"),a("code",[t._v("Number")]),t._v("、"),a("code",[t._v("Boolean")]),t._v("、"),a("code",[t._v("Array")]),t._v("和"),a("code",[t._v("Object")]),t._v("类型的 prop 数据，若需要处理其他类型的数据，则可通过"),a("code",[t._v("converter")]),t._v("选项来指定一个转换器函数。使用默认转换器的方式很简单，直接在属性声明中指定"),a("code",[t._v("type")]),t._v("选项即可，若未显式指定也未通过"),a("code",[t._v("converter")]),t._v("选项自定义转换器，则默认是"),a("code",[t._v("String")]),t._v("类型。")]),t._v(" "),a("p",[t._v("若设有"),a("code",[t._v("type")]),t._v("字段，则 Lit 会将 attr 的字符串值转换为指定的"),a("code",[t._v("type")]),t._v("类型的值赋给对应的 property，注意对于欲解析为引用数据类型的字符串，Lit 是直接使用的"),a("code",[t._v("JSON.parse()")]),t._v("方法转换，所以对于 JSON 字符串必须符合 JSON 规范，否则会报错。")]),t._v(" "),a("p",[t._v("在 prop 值转为相应的 attr 字符串值中，若 prop 的值为"),a("code",[t._v("null")]),t._v("或"),a("code",[t._v("undefined")]),t._v("，则 Lit 会移除元素标签上对应的 attribute（对于"),a("code",[t._v("type")]),t._v("为"),a("code",[t._v("Boolean")]),t._v("的 property，只要其值为假就会移除 attribute），而引用类型数据在转为字符串值时，Lit 直接使用"),a("code",[t._v("JSON.stringify()")]),t._v("方法转换，所以对于非标准 JSON 字段或数据在转换中可能就会丢失。")]),t._v(" "),a("h4",{attrs:{id:"自定义属性数据转换器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义属性数据转换器"}},[t._v("#")]),t._v(" 自定义属性数据转换器")]),t._v(" "),a("p",[t._v("前面有提到可以通过配置"),a("code",[t._v("converter")]),t._v("选项来自定义转换器，该选项可以是一个"),a("strong",[t._v("对象或函数")]),t._v("。")]),t._v(" "),a("p",[t._v("当"),a("code",[t._v("converter")]),t._v("为对象时，其包含以下两个方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("fromAttribute(value, type)")]),t._v("：该方法用于将 attr 字符串值"),a("code",[t._v("value")]),t._v("转换为指定的"),a("code",[t._v("type")]),t._v("类型 prop 值，并应该返回转换后的值，"),a("code",[t._v("type")]),t._v("可以是我们自定义的类型，比如"),a("code",[t._v("Function")]),t._v("；")]),t._v(" "),a("li",[a("code",[t._v("toAttribute(value, type)")]),t._v("：该方法用于将 prop "),a("code",[t._v("type")]),t._v("类型值"),a("code",[t._v("value")]),t._v("转换为 attr 字符串值，并应该返回转换后的值，若返回"),a("code",[t._v("null")]),t._v("或"),a("code",[t._v("undefined")]),t._v("则会从元素标签上移除该对应的 attribute。这里"),a("code",[t._v("type")]),t._v("参数可用于自行进一步验证"),a("code",[t._v("value")]),t._v("值合法性？")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" properties "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    myProp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      converter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fromAttribute")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将字符串的 value 转换为 type 类型数据并返回用于映射到 prop 上")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toAttribute")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 type 类型的 value 转换为字符串值并返回用于映射到 attr 上")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("当"),a("code",[t._v("converter")]),t._v("为函数时，其就表示"),a("code",[t._v("fromAttribute")]),t._v("函数，等同于省略"),a("code",[t._v("toAttribute")]),t._v("选项的对象简写形式。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" properties "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    myProp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("converter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于 { converter: { fromAttribute: ()=>{} }")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("若"),a("code",[t._v("converter")]),t._v("使用函数值，或省略"),a("code",[t._v("toAttribute")]),t._v("选项的对象值，则 Lit 使用内置的默认转换器来将 prop 值映射到 attr 上。")]),t._v(" "),a("p",[t._v("个人认为这对于单向数据流的 prop 没有影响，因为我们只需要单向通过 attr 传递值到内部 prop 使用，并不更改 prop 又映射到 attr 上去，就像 vue 中的"),a("code",[t._v("props")]),t._v("与"),a("code",[t._v("v-model")]),t._v("，"),a("code",[t._v("props")]),t._v("用于单向传值，而"),a("code",[t._v("v-model")]),t._v("用于双向绑定，这可以通过配置 prop 的"),a("code",[t._v("reflect")]),t._v("选项来启用双向绑定。")])]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("对于布尔类型的 attribute，在定义其对应的 prop 时默认值必须为"),a("code",[t._v("false")]),t._v("，若其默认值为"),a("code",[t._v("true")]),t._v("则无法通过标签将其设置为 false，因为布尔型 attr 无论是否有值，只要 attr 存在就等同于"),a("code",[t._v("true")]),t._v("。这是 Web 平台中 attr 的标准行为。")]),t._v(" "),a("p",[t._v("若该标准特性不符合组件使用场景，可以使用以下方案之一改造组件：")]),t._v(" "),a("ul",[a("li",[t._v("更改 attr 为其反义名字，使其默认值为"),a("code",[t._v("false")]),t._v("，例如，HTML表单元素使用 "),a("code",[t._v("disabled")]),t._v(" 属性（默认值为 "),a("code",[t._v("false")]),t._v("），而不是 "),a("code",[t._v("enabled")]),t._v("；")]),t._v(" "),a("li",[t._v("使用字符串类型或数值类型的 attribute，而不是布尔类型。")])])]),t._v(" "),a("h3",{attrs:{id:"attribute反射-双向绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#attribute反射-双向绑定"}},[t._v("#")]),t._v(" attribute反射(双向绑定)")]),t._v(" "),a("p",[t._v("前面提到"),a("code",[t._v("attribute")]),t._v("选项只是单向映射-"),a("strong",[t._v("attr2prop")]),t._v("，prop 虽可变化并响应内部DOM，但不会同步到 attr 上，若要实现双向绑定，则可通过配置"),a("code",[t._v("reflect")]),t._v("选项来启用将 prop 的变更同步到 attr 上-"),a("strong",[t._v("prop2attr")]),t._v("（通过 Lit 的默认转换器或自定义的转换器）。")]),t._v(" "),a("p",[t._v("单从数据交互来说，用到"),a("code",[t._v("reflect")]),t._v("选项的地方应该比较少，因为 Lit 中 attr2prop 是响应式的可触发渲染更新，而 prop 的单独修改也是响应式的可触发渲染更新，似乎"),a("code",[t._v("reflect")]),t._v("的 prop2attr 并没有必要。但在 CSS 的角度来看就不一样了，因为 attr 的变化体现在 HTML 标签上，对于 attr 的不同值可枚举的话用于 CSS 中的属性状态匹配来设置不同样式是很有用的，另一方面就是也可以适应当下 Vue 等框架组件中的"),a("code",[t._v("v-model")]),t._v("模式，方便组件外部使用同步更改的数据。")]),t._v(" "),a("p",[a("code",[t._v("reflect")]),t._v("为"),a("code",[t._v("true")]),t._v("的情况下，将"),a("code",[t._v("useDefault")]),t._v("设置为"),a("code",[t._v("true")]),t._v("会阻止 prop 的默认值在初始时同步到其相应的 attr 上，而后所有后续更改都会同步，如果该 attr 被移除，该 prop 将重置为其默认值。该效果与像元素"),a("code",[t._v("id")]),t._v("这类 attr 的行为一致，元素的"),a("code",[t._v("id")]),t._v(" prop 默认值为"),a("code",[t._v("''")]),t._v("（空字符串），并且最初 HTML 上没有"),a("code",[t._v("id")]),t._v(" attr，但如果设置了"),a("code",[t._v("id")]),t._v(" prop（即使设置为空字符串），相应的"),a("code",[t._v("id")]),t._v(" attr 也会在 HTML 上体现出来，如果移除 HTML 上"),a("code",[t._v("id")]),t._v(" attr，DOM 的"),a("code",[t._v("id")]),t._v(" prop 会被重置为初始值"),a("code",[t._v("''")]),t._v("。")]),t._v(" "),a("p",[t._v("为确保元素按预期运行并表现良好，在应用"),a("code",[t._v("reflect")]),t._v("时尽量遵循以下最佳实践：")]),t._v(" "),a("ul",[a("li",[t._v("HTML 的 attr 应作为用户的输入来源，而不应该由元素自身控制，谨慎使用 prop2attr，尽可能考虑使用"),a("code",[t._v(":state()")]),t._v("伪类和可访问性对象模型(无障碍属性)；")]),t._v(" "),a("li",[t._v("反射属性通常也应设置"),a("code",[t._v("useDefault: true")]),t._v("，因为可以防止元素自动生成用户未设置的属性，并有助于匹配预期的平台行为；")]),t._v(" "),a("li",[t._v("不建议反射数据为引用类型；")]),t._v(" "),a("li",[t._v("这些属性配置项并不会自行更改分配给响应式属性的值，有时原生元素会将 prop 限制为某些有效值，若为 prop 分配了无效值，该 prop 将改为设置为默认值。"),a("code",[t._v("useDefault: true")]),t._v("并不会这样做，它仅在移除 attr 时恢复默认值。如果想在 prop 赋值时更改 prop 值，可以定义并装饰一个自定义 prop 设置器 setter。")])]),t._v(" "),a("h3",{attrs:{id:"自定义property访问器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义property访问器"}},[t._v("#")]),t._v(" 自定义property访问器")]),t._v(" "),a("p",[t._v("默认情况下，"),a("code",[t._v("LitElement")]),t._v("类会自动为每个响应式属性定义一对 getter/setter（都属于访问器 accessor），这些 getter 和 setter 用于获取和设置属性的值，其中 setter 会自动调用"),a("code",[t._v("requestUpdate()")]),t._v("，若此时更新还未开始则立即启动更新，已开始就等下一轮。")]),t._v(" "),a("p",[t._v("自定义属性的 getter/setter：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" properties "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    prop"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  _prop "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("prop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" oldValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_prop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_prop "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 手动调用更新，两个可选参数分别表示更新的 property，和该 property 的上一个值")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prop'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("prop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_prop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("大多情况下，我们无需自定义属性访问器，只有极少数需要同步验证用户设置的任何值时可能会用到自定义设置器。若要在值更新前后做其他事，建议使用生命周期函数，比如以下两个：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("willUpdate(changedProperties)")]),t._v("：该函数在更新前调用，"),a("code",[t._v("changedProperties")]),t._v("参数为一个"),a("code",[t._v("Map")]),t._v("对象，包含即将更改的 prop 名称和其旧值键值对；")]),t._v(" "),a("li",[a("code",[t._v("updated(changedProperties)")]),t._v("：该函数在更新后调用，参数同上。")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("当子类中存在父类已定义的响应式属性(相当于重复声明)，若未自定义访问器，Lit 默认仍会生成访问器从而覆盖父类该属性的访问器（相当于子类重新定义了，跟父类该属性的配置无关了），所以一般来说子类对该属性无特殊需求就不应该重复声明。若子类只是想更改父类上该已有属性的配置项以便适应子类的特殊需求，但并不想因此 Lit 又生成访问器覆盖父类的访问器，则可以在子类中该属性上配置"),a("code",[t._v("{ noAccessor: true }")]),t._v("来阻止 Lit 为子类该属性重新生成访问器，若要自定义访问器则无需设置改配置项。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 继承自某父类的子类中更改父类同名属性 myProp 的 type（假设父类中为 Boolean）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" properties "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  myProp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" noAccessor"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("h3",{attrs:{id:"自定义属性变更检测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义属性变更检测"}},[t._v("#")]),t._v(" 自定义属性变更检测")]),t._v(" "),a("p",[t._v("也即是前面有提到的"),a("code",[t._v("hasChanged")]),t._v("配置项，自定义函数检测判断值是否变更，返回布尔值，若返回"),a("code",[t._v("true")]),t._v("有变更则走更新流程(响应更新的生命周期)。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" properties "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置为仅奇数认为有变化")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasChanged")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("newVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldVal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hasChanged "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" oldVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("newVal"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(", ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("oldVal"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(", ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("hasChanged"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" hasChanged"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"css-样式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-样式"}},[t._v("#")]),t._v(" CSS 样式")]),t._v(" "),a("ul",[a("li",[t._v("编程式：通过在类中声明静态属性"),a("code",[t._v("styles")]),t._v("，并赋值为通过"),a("code",[t._v("css")]),t._v("字符串标签函数处理的 CSS 代码，这样添加的 CSS 将作用到组件内的 Shadow DOM 上（前面"),a("code",[t._v("render")]),t._v("中声明的 HTML 模板，这样定义的 HTML 和 CSS 都将渲染在组件内的 shadowRoot 根节点中，不会影响外部结构和样式）；")]),t._v(" "),a("li",[t._v("声明式：通过在 HTML 模板中添加"),a("code",[t._v("<style>")]),t._v("标签创建内联样式，或使用"),a("code",[t._v("<link>")]),t._v("标签链接外部样式**(不推荐外联样式)**；")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("编程式与声明式创建的样式虽然都有效，但两者样式的存在位置是不是一样的，编程式的最终会应用到 "),a("strong",[t._v("shadowRoot")]),t._v("，在浏览器开发者工具的 shadow tree 中是看不到的，而声明式的"),a("code",[t._v("<style>")]),t._v("标签就跟 shadow DOM 中的其他 HTML 标签一样是在 shadow tree 中可见的。")])]),t._v(" "),a("p",[t._v("编程式：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" LitElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" css"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" styles "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" css"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n    :host {\n      color: red;\n    }\n  ")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" html"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<p>我是红色的</p>")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("这样添加的样式为静态样式，即不会根据组件外部进行动态处理的样式，适用于所有组件实例，大多情况下是添加样式的最佳方式。静态属性"),a("code",[t._v("style")]),t._v("的值可以是一个带"),a("code",[t._v("css")]),t._v("标签的模板字面量，也可以是这样的一组字面量"),a("code",[t._v("[css`xxx`, css`xxx`]")]),t._v("。")])]),t._v(" "),a("p",[t._v("声明式：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" LitElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" html"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n      <style>\n        :host {\n          color: red;\n        }\n      </style>\n      <p>我是红色的</p>\n    ")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("静态样式中也可以使用表达式，只要是同步操作就可以，但为防止恶意代码，Lit 对字符串中的表达式进行了限制，要求这些表达式本身也必须是带"),a("code",[t._v("css")]),t._v("标签的字符串或数字，若特殊情况必须使用非"),a("code",[t._v("css")]),t._v("标签字面量的表达式，并且我们可以确定该表达式来源可信，比如自己代码定义的常量，那么也可以使用"),a("code",[t._v("unsafeCSS()")]),t._v("函数包装该表达式：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" LitElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" css "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" primaryColor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" css"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("blue")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dangerColor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("red")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由 css 标记的表达式可直接使用，否则需要使用 unsafeCSS 函数包裹")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" styles "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" css"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n    :host { color: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("primaryColor"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("; }\n    .danger { color: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unsafeCSS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dangerColor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("; }\n  ")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("上面在静态样式中使用表达式的场景来看，似乎比较适合定义一些样式常量，但若是针对定制 UI 主题，使用 CSS 变量更加合适。")])]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("虽然声明式 CSS 中也可以使用表达式，但存在一些重要的限制和性能问题，故不推荐使用。")])]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("由于 web components 所有内容都是在 JS 中定义的，而 CSS 中使用的"),a("code",[t._v("Unicode")]),t._v("转义字符格式为反斜杠"),a("code",[t._v("\\")]),t._v("加四或六位十六进制数字(如项目符号字符"),a("code",[t._v("\\2022")]),t._v(")，格式与 JS 中废弃的八进制转义格式类似，故直接在 JS 中使用会报错，为此有两种解决方案：")]),t._v(" "),a("ol",[a("li",[t._v("使用两个反斜杠，如："),a("code",[t._v("\\\\2022")]),t._v("；")]),t._v(" "),a("li",[t._v("使用"),a("code",[t._v("\\u")]),t._v("开头，如："),a("code",[t._v("\\u2022")]),t._v("。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" styles "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" css"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n  div::before {\n    content: '\\u2022';\n  }\n")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("h3",{attrs:{id:"从父类继承样式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从父类继承样式"}},[t._v("#")]),t._v(" 从父类继承样式")]),t._v(" "),a("p",[t._v("子类继承父类时包括"),a("code",[t._v("styles")]),t._v("这些静态属性本就会被继承，若不需要做样式修改就无需对样式进行声明，若子类也声明了"),a("code",[t._v("styles")]),t._v("静态属性，那就是对父类的重写覆盖，即使声明后赋了空值，此时相当于丢弃了父类的样式。若还要使用父类中的样式，但子类中又需要覆盖或定义一部分自己的样式，那就需要将父类的样式手动引用到当前子类中，此时其实不能称为继承了，而是复用（"),a("strong",[t._v("注意顺序，复用父类的应该在前面，自定义的应该后")]),t._v("）。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" css "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" MyParentElement "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./my-parent-element.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyParentElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" styles "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    MyParentElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("styles"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引用父类的静态样式")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 覆盖或增加一部分自己的特殊样式")]),t._v("\n    css"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n      div {\n        color: red;\n      }\n    ")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"共享样式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享样式"}},[t._v("#")]),t._v(" 共享样式")]),t._v(" "),a("p",[t._v("这里的共享样式并非常规开发中的全局样式，一份就作用于所有组件，而是指多个组件都可以引用到自己内部的共性样式，实际每个组件都会生成一份，只是来源于同一处。操作方式也就是在一个单独的 JS 模块中声明带"),a("code",[t._v("css")]),t._v("标签的样式并导出供其他需要的组件导入放在自己的静态"),a("code",[t._v("styles")]),t._v("中。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// shared-styles.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" css "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" resetStyles "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" css"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n  p { margin: 0; }\n")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在需要引用的组件中：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" resetStyles "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./shared-styles.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" styles "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    sharedStyles"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    css"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n      p { color: blue; }\n    ")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"动态样式class和style"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态样式class和style"}},[t._v("#")]),t._v(" 动态样式class和style")]),t._v(" "),a("p",[t._v("这里指的是在组件内元素上动态切换"),a("code",[t._v("class")]),t._v("和"),a("code",[t._v("style")]),t._v("行内样式，需要用到 Lit 提供的额外两个指令方法--"),a("code",[t._v("classMap()")]),t._v("和"),a("code",[t._v("styleMap()")]),t._v("，可用于处理类似 Vue 中的元素"),a("code",[t._v("class")]),t._v("和"),a("code",[t._v("style")]),t._v("属性的对象结构值。")]),t._v(" "),a("p",[t._v("用法示例：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" LitElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" css "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" classMap "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit/directives/class-map.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" styleMap "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lit/directives/style-map.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n​\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LitElement")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" properties "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    classes"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    styles"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" styles "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" css"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n    .someclass { border: 1px solid red; padding: 4px; }\n    .anotherclass { background-color: navy; }\n  ")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n​\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("classes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" someclass"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" anotherclass"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("styles "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" color"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lightgreen'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fontFamily"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Roboto'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" html"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n      <div class=")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("classMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("classes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(" style=")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("styleMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("styles"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(">\n        Some content\n      </div>\n    ")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"主题样式风格"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主题样式风格"}},[t._v("#")]),t._v(" 主题样式风格")]),t._v(" "),a("p",[t._v("通过 CSS 变量来定义主题风格，对外暴露统一修改方案。")]),t._v(" "),a("h2",{attrs:{id:"组件生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件生命周期"}},[t._v("#")]),t._v(" 组件生命周期")]),t._v(" "),a("h3",{attrs:{id:"标准自定义元素生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标准自定义元素生命周期"}},[t._v("#")]),t._v(" 标准自定义元素生命周期")]),t._v(" "),a("p",[t._v("此类生命周期指的是 web 标准中定义 web components 的 class 类中规范的 5 个生命周期方法（Lit 中当然也可用）。按触发顺序分别为：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("constructor()")]),t._v("：构造函数，在元素被"),a("strong",[t._v("创建或升级时")]),t._v("调用（升级指的是自定义元素已先在 DOM 中存在，而元素的定义在之后才加载的情况，也就是在 HTML5 中未知元素在未定义前会被当做普通行内元素处理，而在其定义被加载解析后就会升级为自定义元素）；\n"),a("ul",[a("li",[t._v("Lit 会在此阶段调用"),a("code",[t._v("requestUpdate()")]),t._v("请求异步更新，因此在 Lit 组件升级时，其会立即更新绑定标签上相关已设置内容；")]),t._v(" "),a("li",[t._v("应在此方法中设置 prop 的默认值")])])]),t._v(" "),a("li",[a("code",[t._v("connectedCallback()")]),t._v("：连接回调，在元素被添加到文档的 DOM 中时调用，在该函数中应设置仅在元素连接到文档时才执行的任务（类似 Vue 中 mounted 钩子），常见的是在外部对象上添加事件监听器（如 window 或 document 上），并在元素断开连接时撤销这些任务（类似 Vue 中 beforeUnmount 钩子做的事）；\n"),a("ul",[a("li",[t._v("Lit 在元素连接后启动第一个元素更新周期。为渲染做准备时，Lit 还会确保创建 "),a("code",[t._v("renderRoot")]),t._v("（通常是其 shadowRoot），一旦某个元素至少与文档连接过一次，无论该元素的连接状态如何，组件更新都将继续进行；")]),t._v(" "),a("li",[t._v("Lit 中使用该钩子时，还应该调用"),a("code",[t._v("super.connectedCallback()")]),t._v("以使用父类上的默认行为")])])]),t._v(" "),a("li",[a("code",[t._v("disconnectedCallback")]),t._v("：断开连接回调，为上面连接回调的对立面，类似 Vue 中的 beforeUnmount 钩子（不是 unmounted，因为 unmounted 是已销毁完成），应在该回调中撤销上面创建的任务（"),a("strong",[t._v("对于事件监听器，移除创建的外部事件监听器即可，对于组件内自身 DOM 上的事件监听器虚无移除，内部的不会产生影响")]),t._v("）；\n"),a("ul",[a("li",[t._v("Lit 会在此阶段暂停响应式更新周期（Lit 独有，后面介绍），而当元素重新连接时又恢复；")]),t._v(" "),a("li",[t._v("同样，Lit 中使用该钩子时，也应该调用"),a("code",[t._v("super.disconnectedCallback()")]),t._v("以使用父类上的默认行为")])])]),t._v(" "),a("li",[a("code",[t._v("attributeChangedCallback()")]),t._v("：属性更改回调，当元素的某个"),a("code",[t._v("observedAttributes")]),t._v("被观察属性发生变化时调用；\n"),a("ul",[a("li",[t._v("Lit 使用此回调将 attr 的更改同步到响应式 prop。Lit 还会自动设置元素的 "),a("code",[t._v("observedAttributes")]),t._v(" 数组，以匹配组件的响应式属性列表；")]),t._v(" "),a("li",[t._v("由于 Lit 内部的响应式封装，很少需要手动调用这个方法")])])]),t._v(" "),a("li",[a("code",[t._v("adoptedCallback()")]),t._v("：当组件移动到新文档时调用，很少使用，且该钩子没有 Polyfill 实现。\n"),a("ul",[a("li",[t._v("Lit 对此回调没有默认行为")])])])]),t._v(" "),a("h3",{attrs:{id:"响应式更新生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应式更新生命周期"}},[t._v("#")]),t._v(" 响应式更新生命周期")]),t._v(" "),a("p",[t._v("这部分的生命周期钩子是 Lit 组件专有的，当响应式属性发生变化或显式调用 "),a("code",[t._v("requestUpdate()")]),t._v(" 方法时，会触发响应式更新周期。Lit 异步执行更新，因此属性变化会被批量处理 —— 如果在请求更新后但更新开始前有更多属性发生变化，所有这些变化都会在同一次更新中被捕获。")])])}),[],!1,null,null,null);s.default=e.exports}}]);
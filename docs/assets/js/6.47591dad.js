(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{418:function(t,s,a){t.exports=a.p+"assets/img/THREE.LatheGeometry.e0e9c556.jpg"},419:function(t,s,a){t.exports=a.p+"assets/img/THREE.ExtrudeGeometry.d7330272.jpg"},420:function(t,s,a){t.exports=a.p+"assets/img/THREE.TubeGeometry.2bff2b51.jpg"},421:function(t,s,a){t.exports=a.p+"assets/img/THREE.ParametricGeometry.420cc5fc.jpg"},422:function(t,s,a){t.exports=a.p+"assets/img/THREE.TextGeometry.37aea0e2.jpg"},423:function(t,s,a){t.exports=a.p+"assets/img/ThreeBSP.1efc458a.jpg"},453:function(t,s,a){"use strict";a.r(s);var n=a(18),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"第6章-高级几何体和二元操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第6章-高级几何体和二元操作"}},[t._v("#")]),t._v(" 第6章 高级几何体和二元操作")]),t._v(" "),n("p",[t._v("目录\n")]),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#_6-1-three-convexgeometry-创建包围点云的最小图形-凸面"}},[t._v("6.1 THREE.ConvexGeometry创建包围点云的最小图形(凸面)")])]),n("li",[n("a",{attrs:{href:"#_6-2-three-lathegeometry-由曲线绕中心轴旋转得到图形"}},[t._v("6.2 THREE.LatheGeometry由曲线绕中心轴旋转得到图形")])]),n("li",[n("a",{attrs:{href:"#_6-3-通过拉伸创建几何体"}},[t._v("6.3 通过拉伸创建几何体")]),n("ul",[n("li",[n("a",{attrs:{href:"#_6-3-1-three-extrudegeometry-将二维图形堆叠挤压成三维"}},[t._v("6.3.1 THREE.ExtrudeGeometry将二维图形堆叠挤压成三维")])]),n("li",[n("a",{attrs:{href:"#_6-3-2-three-tubegeometry-沿着一条三维样条曲线创建出管道"}},[t._v("6.3.2 THREE.TubeGeometry沿着一条三维样条曲线创建出管道")])]),n("li",[n("a",{attrs:{href:"#_6-3-3-拉伸svg图形"}},[t._v("6.3.3 拉伸SVG图形")])])])]),n("li",[n("a",{attrs:{href:"#_6-4-three-parametricgeometry-根据给定函数确定顶点绘制几何体"}},[t._v("6.4 THREE.ParametricGeometry根据给定函数确定顶点绘制几何体")])]),n("li",[n("a",{attrs:{href:"#_6-5-创建三维文本"}},[t._v("6.5 创建三维文本")]),n("ul",[n("li",[n("a",{attrs:{href:"#_6-5-1-three-textgeometry-渲染文本"}},[t._v("6.5.1 THREE.TextGeometry渲染文本")])]),n("li",[n("a",{attrs:{href:"#_6-5-2-添加自定义字体"}},[t._v("6.5.2 添加自定义字体")])])])]),n("li",[n("a",{attrs:{href:"#_6-6-使用二元操作组合网格"}},[t._v("6.6 使用二元操作组合网格")]),n("ul",[n("li",[n("a",{attrs:{href:"#_6-6-1-subtract-相减"}},[t._v("6.6.1 subtract相减")])]),n("li",[n("a",{attrs:{href:"#_6-6-2-intersect-相交"}},[t._v("6.6.2 intersect相交")])]),n("li",[n("a",{attrs:{href:"#_6-6-3-union-联合"}},[t._v("6.6.3 union联合")])])])])])]),n("p"),t._v(" "),n("h2",{attrs:{id:"_6-1-three-convexgeometry创建包围点云的最小图形-凸面"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-three-convexgeometry创建包围点云的最小图形-凸面"}},[t._v("#")]),t._v(" 6.1 "),n("code",[t._v("THREE.ConvexGeometry")]),t._v("创建包围点云的最小图形(凸面)")]),t._v(" "),n("p",[t._v("该方法可以围绕一组点创建一个凸包，这个凸包就是"),n("strong",[t._v("包围这组点")]),t._v("的最小图形，注意这里说的是包围，并不是边线要经过所有点(即这组点并不是全都会成为顶点，但顶点肯定属于这组点)。该方法属于three.js的扩展方法，需要额外引入"),n("code",[t._v("examples/js/geometries/ConvexGeometry.js")]),t._v("文件。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一组随机点")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" points "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Array")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fill")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("round")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" y "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("round")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" z "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("round")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Vector3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 点用三维向量表示")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建包围给定点组的最小图形（传入点集数组）")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" convexGeometry "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ConvexGeometry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("points"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若要使图形渲染相对比较平滑(减少褶皱感)，则需要手动调用下面的法线计算方法（其他大部分几何体在创建对象时会自动计算这些法线，无需手动调用）")]),t._v("\nconvexGeometry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeVertexNormals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算顶点法线")]),t._v("\nconvexGeometry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeFaceNormals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算面法线")]),t._v("\nconvexGeometry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("normalsNeedUpdate "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h2",{attrs:{id:"_6-2-three-lathegeometry由曲线绕中心轴旋转得到图形"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-three-lathegeometry由曲线绕中心轴旋转得到图形"}},[t._v("#")]),t._v(" 6.2 "),n("code",[t._v("THREE.LatheGeometry")]),t._v("由曲线绕中心轴旋转得到图形")]),t._v(" "),n("p",[t._v("该方法允许由一条光滑的曲线(可称为样条曲线)围绕中心Z轴旋绕而得到一个图形，因是围绕Z轴旋转得到，所以曲线上的每个点都绕成一个圆(或部分圆弧)，得到类似花瓶这样的瓶罐柱体(或一部分柱体)。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" latheGeometry "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LatheGeometry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("points"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据点组构成的曲线创建几何体")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所有未网格化的几何体都只是定义形状，还需要应用材质进行网格化后再添加到场景中才能看到")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" latheMesh "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Mesh")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("latheGeometry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MeshNormalMaterial")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("color"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#f00'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("其参数说明如下：\n"),n("img",{attrs:{src:a(418),alt:"THREE.LatheGeometry的参数"}})]),t._v(" "),n("h2",{attrs:{id:"_6-3-通过拉伸创建几何体"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-通过拉伸创建几何体"}},[t._v("#")]),t._v(" 6.3 通过拉伸创建几何体")]),t._v(" "),n("p",[t._v("所谓拉伸，可以理解为增加二维图形的深度(Z轴高度)，就是指可以沿着Z轴拉伸一个二维图形，将其转换为三维图形，就像将一个二维圆拉伸后可以得到一个圆柱体。")]),t._v(" "),n("h3",{attrs:{id:"_6-3-1-three-extrudegeometry将二维图形堆叠挤压成三维"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-1-three-extrudegeometry将二维图形堆叠挤压成三维"}},[t._v("#")]),t._v(" 6.3.1 "),n("code",[t._v("THREE.ExtrudeGeometry")]),t._v("将二维图形堆叠挤压成三维")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 假设这里`shapes`为第五章中`THREE.Shape`自定义的多边形(也可以是其他二维图形)，`options`为配置对象")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ExtrudeGeometry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shapes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若希望拉伸后的三维物体正面与侧面使用不同的材质，则可以向`THREE.Mesh`传入一个材质数组，数组中第一个材质将被用于正面，第二个被用于侧面")]),t._v("\n")])])]),n("p",[t._v("其"),n("code",[t._v("options")]),t._v("配置对象包含选项说明如下("),n("code",[t._v("shapes")]),t._v("为第一个参数，非options的选项)：\n"),n("img",{attrs:{src:a(419),alt:"THREE.ExtrudeGeometry的参数"}})]),t._v(" "),n("h3",{attrs:{id:"_6-3-2-three-tubegeometry沿着一条三维样条曲线创建出管道"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-2-three-tubegeometry沿着一条三维样条曲线创建出管道"}},[t._v("#")]),t._v(" 6.3.2 "),n("code",[t._v("THREE.TubeGeometry")]),t._v("沿着一条三维样条曲线创建出管道")]),t._v(" "),n("p",[t._v("该方法并非是像上面一样将一个给定的二维图形进行拉伸，而是根据一个三维曲线路径创建出对应的管道，该曲线可以看做是管道截面圆心的路径。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由一组点创建一条平滑的样条曲线，这里`points`同前面一样为创建的一组点")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" path "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CatmullRomCurve3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("points"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 三维曲线，无`SplineCurve3`对象，有`SplineCurve`为二维曲线")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TubeGeometry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" segments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" radius"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rediusSegments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" closed"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("其参数说明如下(SplineCurve3只是表示path是一个三维曲线样条路径)：\n"),n("img",{attrs:{src:a(420),alt:"THREE.TubeGeometry的参数"}})]),t._v(" "),n("h3",{attrs:{id:"_6-3-3-拉伸svg图形"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-3-拉伸svg图形"}},[t._v("#")]),t._v(" 6.3.3 拉伸SVG图形")]),t._v(" "),n("p",[t._v("拉伸SVG图形仍是通过"),n("code",[t._v("THREE.ExtrudeGeometry")]),t._v("方法，只是其中的图形参数"),n("code",[t._v("shapes")]),t._v("由SVG图形转换而来，所以这里需要用到一个第三方路径转换库"),n("a",{attrs:{href:"https://github.com/asutherland/d3-threeD",target:"_blank",rel:"noopener noreferrer"}},[t._v("d3-threeD"),n("OutboundLink")],1),t._v("将SVG绘图路径转换为Three.js的绘图路径(可使用本书example示例中的文件)。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" path "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" svgPath"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAttribute")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取svg中`path`标签上的`d`属性")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" shape "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("transformSVGPathExposed")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// transformSVGPathExposed === transformSVGPath，由d3-threeD库提供")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ExtrudeGeometry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shape"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h2",{attrs:{id:"_6-4-three-parametricgeometry根据给定函数确定顶点绘制几何体"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-three-parametricgeometry根据给定函数确定顶点绘制几何体"}},[t._v("#")]),t._v(" 6.4 "),n("code",[t._v("THREE.ParametricGeometry")]),t._v("根据给定函数确定顶点绘制几何体")]),t._v(" "),n("p",[t._v("该方法主要就是自定义一个顶点坐标计算公式，从而绘制出各种几何体。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义所有顶点计算方式，u、v取值区间为[0,1]，会根据ParametricGeometry中设置的分割段数自动进行取值组合依次调用以用于各顶点坐标计算，则分段数越多则生成的顶点越多，曲面越平滑（当然计算量也越大）")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("radialWave")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("u"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" optionalTarget")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" optionalTarget "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Vector3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自定义顶点坐标，采用不同的公式就会得到不同的坐标组合，而形成各种几何体")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" z "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PI")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("cos")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PI")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回一个顶点")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据上面的顶点可以创建出一个波浪形曲面")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ParametricGeometry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("radialWave"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("70")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("70")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其第一个参数为分配顶点的函数")]),t._v("\n")])])]),n("p",[t._v("其参数说明如下：\n"),n("img",{attrs:{src:a(421),alt:"THREE.ParametricGeometry的参数"}}),t._v("\n上面function中"),n("code",[t._v("u")]),t._v("、"),n("code",[t._v("v")]),t._v("取值区间为[0,1]，会分别按照"),n("code",[t._v("slices")]),t._v("、"),n("code",[t._v("stacks")]),t._v("设置的段数进行分割组合并调用该函数以计算每个顶点的位置，即"),n("code",[t._v("slices")]),t._v("和"),n("code",[t._v("stacks")]),t._v("决定了顶点计算函数function的调用频率，总共调用次数是"),n("code",[t._v("slices * stacks")]),t._v("次，即"),n("code",[t._v("u")]),t._v("和"),n("code",[t._v("v")]),t._v("的每个取值都会与对方的所有取值进行一次组合计算。"),n("code",[t._v("examples/js/ParametricGeometries.js")]),t._v("文件中可以查看更多几何图形的顶点坐标计算公式，如克莱因瓶、平面、二维莫比乌斯带、三维莫比乌斯带、管、环状扭结、球体。")]),t._v(" "),n("h2",{attrs:{id:"_6-5-创建三维文本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-创建三维文本"}},[t._v("#")]),t._v(" 6.5 创建三维文本")]),t._v(" "),n("h3",{attrs:{id:"_6-5-1-three-textgeometry渲染文本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-1-three-textgeometry渲染文本"}},[t._v("#")]),t._v(" 6.5.1 "),n("code",[t._v("THREE.TextGeometry")]),t._v("渲染文本")]),t._v(" "),n("p",[t._v("文本渲染需要指定想用的字体，以及使用"),n("code",[t._v("THREE.TextGeometry")]),t._v("文本几何体进行拉伸处理，这里的拉伸配置项大多与前面提到的拉伸几何体相同，只有部分是特有的。"),n("strong",[t._v("注意这里说的的三维文本")]),t._v("，若是要渲染二维文本并将其用作材质的纹理，那么就不应该使用这里的"),n("code",[t._v("THREE.TextGeometry")]),t._v("，因三维文本的JS开销较大，二维文本直接使用H5的canvas画布会更好("),n("code",[t._v("ctx.font")]),t._v("设置字体，"),n("code",[t._v("ctx.fillText")]),t._v("绘制文本)，再将canvas画布作为纹理输入。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" loadedFont"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fontload "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FontLoader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不能直接使用字体源文件格式，必须转换为json格式或者js文件格式（见下面添加自定义字体）")]),t._v("\nfontload"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./path/to/font/file.json'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  loadedFont "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// res 响应为创建好的字体对象")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里render方法是我们最初封装的渲染函数，用于重绘场景")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TextGeometry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'文本内容'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第二个参数为一些配置项")]),t._v("\n  font"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" loadedFont"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 必选项")]),t._v("\n  size"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("70")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("其参数说明如下：\n"),n("img",{attrs:{src:a(422),alt:"THREE.TextGeometry的参数"}})]),t._v(" "),n("h3",{attrs:{id:"_6-5-2-添加自定义字体"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-2-添加自定义字体"}},[t._v("#")]),t._v(" 6.5.2 添加自定义字体")]),t._v(" "),n("p",[t._v("因JS中不能直接使用字体源文件格式，"),n("strong",[t._v("必须将字体文件转换为json格式")]),t._v("或者js文件格式(旧版three.js使用)，可以使用"),n("a",{attrs:{href:"http://gero3.github.io/facetype.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("Facetype.js"),n("OutboundLink")],1),t._v("在线转换(可转换"),n("code",[t._v("ttf/otf")]),t._v("字体源文件)，three.js的示例中也提供了几种可用的字体也都是该库转换提供的。")]),t._v(" "),n("h2",{attrs:{id:"_6-6-使用二元操作组合网格"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-使用二元操作组合网格"}},[t._v("#")]),t._v(" 6.6 使用二元操作组合网格")]),t._v(" "),n("p",[t._v("通过Three.js的扩展库"),n("a",{attrs:{href:"https://github.com/skalnik/ThreeBSP",target:"_blank",rel:"noopener noreferrer"}},[t._v("ThreeBSP"),n("OutboundLink")],1),t._v("，我们可以将多个标准几何体组合在一起("),n("strong",[t._v("相交、相减、联合等")]),t._v(")创建出新的几何体。由于该库使用CoffeeScript开发，要使用的话要么需要再引入coffee-script.js运行时实施编译，要么需要将其预先编译为JS文件就可直接使用(推荐采用该方式，可以在本书示例代码中的找到编译后的JS文件"),n("code",[t._v("libs/other/ThreeBSP.js")]),t._v(")。该库提供了如下三个能力函数(实例方法)：\n"),n("img",{attrs:{src:a(423),alt:"ThreeBSP的能力函数"}}),t._v("\n注意：这三个函数在计算时使用的都是网格的绝对位置，所以在应用这三个函数前，若将多个网格组合在一起(指成组)或使用多种材质，可能会得到一些奇怪的结果，故为不出现这些意料之外的情况应当确保使用的是未经组合的网格。")]),t._v(" "),n("p",[t._v("这三个实例方法是可以同时使用的，如先取图形1与图形2的相交部分，再取该相交部分除去与图形3相交的部分。")]),t._v(" "),n("h3",{attrs:{id:"_6-6-1-subtract相减"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-1-subtract相减"}},[t._v("#")]),t._v(" 6.6.1 "),n("code",[t._v("subtract")]),t._v("相减")]),t._v(" "),n("p",[t._v("在当前对象上减去与指定对象相交的部分。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将相关几何图形抓换为`ThreeBSP`对象")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" g1BSP "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreeBSP")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("geometry1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" g2BSP "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreeBSP")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("geometry2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" resultBSP "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" g1BSP"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("subtract")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g2BSP"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示在`g1BSP`上减去其与`g2BSP`相交的部分，结果是`g1BSP`剩余的部分，得到的`resultBSP`结果可以继续与其他几何体进行类似操作")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" resultBSP"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toMesh")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将融合结果转换为mesh网格")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 手动调用新几何体的法线计算，使新几何体相对平滑")]),t._v("\nresult"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("geometry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeFaceNormals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresult"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("geometry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeVertexNormals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"_6-6-2-intersect相交"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-2-intersect相交"}},[t._v("#")]),t._v(" 6.6.2 "),n("code",[t._v("intersect")]),t._v("相交")]),t._v(" "),n("p",[t._v("获取当前对象上与指定对象相交的部分。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// g1BSP、g2BSP同上")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" resultBSP "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" g1BSP"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("intersect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g2BSP"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示在`g1BSP`上只取其与`g2BSP`相交的部分")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" resultBSP"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toMesh")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将融合结果转换为mesh网格")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 手动调用新几何体的法线计算，使新几何体相对平滑")]),t._v("\nresult"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("geometry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeFaceNormals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresult"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("geometry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeVertexNormals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"_6-6-3-union联合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-3-union联合"}},[t._v("#")]),t._v(" 6.6.3 "),n("code",[t._v("union")]),t._v("联合")]),t._v(" "),n("p",[t._v("该方法并不是很有用，因为three.js本身也提供了这个功能，可以使用"),n("code",[t._v("THREE.Geometry.merge")]),t._v("方法合并多个几何体，而且性能更好。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" resultBSP "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" g1BSP"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("union")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g2BSP"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示将`g1BSP`与`g2BSP`组合成一个几何体")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{458:function(t,s,a){"use strict";a.r(s);var n=a(18),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js零散集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js零散集"}},[t._v("#")]),t._v(" JS零散集")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#值的比较"}},[t._v("值的比较")])]),a("li",[a("a",{attrs:{href:"#循环"}},[t._v("循环")])]),a("li",[a("a",{attrs:{href:"#函数"}},[t._v("函数")])]),a("li",[a("a",{attrs:{href:"#对象"}},[t._v("对象")])]),a("li",[a("a",{attrs:{href:"#对象中的this-new"}},[t._v("对象中的this/new")]),a("ul",[a("li",[a("a",{attrs:{href:"#构造器的-return"}},[t._v("构造器的 return")])])])]),a("li",[a("a",{attrs:{href:"#可选链"}},[t._v("可选链 ?.")])]),a("li",[a("a",{attrs:{href:"#symbol"}},[t._v("Symbol")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"值的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#值的比较"}},[t._v("#")]),t._v(" 值的比较")]),t._v(" "),a("p",[t._v("常见比较运算符："),a("code",[t._v(">")]),t._v("、"),a("code",[t._v("<")]),t._v("、"),a("code",[t._v(">=")]),t._v("、"),a("code",[t._v("<=")]),t._v("、"),a("code",[t._v("==")]),t._v("、"),a("code",[t._v("===")]),t._v("、"),a("code",[t._v("!=")]),t._v("、"),a("code",[t._v("!==")])]),t._v(" "),a("ul",[a("li",[t._v("当对不同类型的值进行比较时，它们会先被转化为数字（除"),a("code",[t._v("===")]),t._v("和"),a("code",[t._v("!==")]),t._v("）再进行比较，"),a("code",[t._v("null")]),t._v("被转化为"),a("code",[t._v("0")]),t._v("，注意"),a("code",[t._v("undefined")]),t._v("被转化为"),a("code",[t._v("NaN")]),t._v("，"),a("code",[t._v("NaN")]),t._v("与自身也不相等")]),t._v(" "),a("li",[t._v("在非严格相等"),a("code",[t._v("==")]),t._v("下，"),a("code",[t._v("null")]),t._v("和"),a("code",[t._v("undefined")]),t._v("相等且各自不等于任何其他非自身的值")]),t._v(" "),a("li",[t._v("字符串的比较，会按照“字母表”顺序逐字符地比较大小(实际是Unicode编码的大小)，后面的字母大于前面的，小写字母大于大写字母")]),t._v(" "),a("li",[t._v("在使用"),a("code",[t._v(">")]),t._v("或"),a("code",[t._v("<")]),t._v("进行比较时，需要注意变量可能为"),a("code",[t._v("null/undefined")]),t._v("的情况，比较好的方法是单独检查变量是否等于"),a("code",[t._v("null/undefined")])])]),t._v(" "),a("p",[t._v("与运算"),a("code",[t._v("&&")]),t._v("和或运算"),a("code",[t._v("||")]),t._v("返回的都是运算结果的原始值，而不是转换为布尔值，与运算"),a("code",[t._v("&&")]),t._v("优先级比或运算"),a("code",[t._v("||")]),t._v("高。")]),t._v(" "),a("h2",{attrs:{id:"循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环"}},[t._v("#")]),t._v(" 循环")]),t._v(" "),a("p",[a("code",[t._v("++i/--i")]),t._v("与"),a("code",[t._v("i++/i--")]),t._v("区别：前者是先自增/自减后的新结果参与所在代码块运算，而后者是先参与所在代码块运算后再进行自增/自减，其新结果得下次才能使用到，若单独使用而不参与循环代码块运算或在循环代码块之外使用时两者结果一样。")]),t._v(" "),a("p",[t._v("非表达式的语法结构不能与三元运算符"),a("code",[t._v("? :")]),t._v("一起使用，如"),a("code",[t._v("break")]),t._v("、"),a("code",[t._v("continue")]),t._v("语句。")]),t._v(" "),a("p",[a("code",[t._v("break")]),t._v("用于中止当前循环(不包括数组的"),a("code",[t._v("forEach")]),t._v(")、"),a("code",[t._v("switch")]),t._v("语句或"),a("code",[t._v("label")]),t._v("标记语句，并把程序控制流转到紧接着被中止语句后面的语句，注意其只能用于最小作用域是前面三种环境下，否则将抛出语法错误，比如数组的"),a("code",[t._v("forEach")]),t._v("，其参数是个函数，若最小代码块是该函数则break是不生效的，不会跳出该函数（可通过抛出错误来实现中断，但此时需要在外部"),a("code",[t._v("catch")]),t._v("抛出的错误，否则会影响后续程序执行，可查看"),a("RouterLink",{attrs:{to:"/js/数组Array.html"}},[t._v("数组Array")]),t._v("中的示例）。")],1),t._v(" "),a("p",[a("code",[t._v("label")]),t._v("标记语句所有浏览器都支持，包括低版本IE。")]),t._v(" "),a("p",[t._v("当要跳出多层循环时，可以使用"),a("code",[t._v("label")]),t._v("标记语句来跳出标记的代码块（当然我们也可以重构，将内层循环提取到一个新的函数中），如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("outer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("prompt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("坐标 (")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果是空字符串或被取消，则中断并跳出这两个循环。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" outer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 跳出指定的outer标记代码块，相当于直接跳出了两层循环，若不指定标记，则只是跳出当前的内层循环")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用得到的值做些事……")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("continue")]),t._v("则是跳过当前这一次循环体后面剩下的内容，而继续下一次循环，其也可以使用标记来实现多层循环中进入外层循环的下一次循环，而跳过内部循环中剩下的循环。")]),t._v(" "),a("p",[a("code",[t._v("label")]),t._v("标记语句语法就是在一条语句前面加一个自命名的标识符和冒号(也可单独一行)，标记可以是任意代码块，并非只能用于循环，但也只有"),a("code",[t._v("break")]),t._v("语句可以使用非循环标记，"),a("code",[t._v("continue")]),t._v("只能在循环中使用标记，如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("outer_block"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  inner_block"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" outer_block"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 跳出outer_block标记块")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 跳过")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 跳过")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),a("p",[t._v("函数参数中的默认值可以是任何表达式，且其只会在缺少参数传入时才会被计算和分配，而非声明时就计算和分配。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'f1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的 f1 在声明参数 a 时并不会立即执行和分配结果给 a")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以下输出结果对比也说明默认值表达式只会在对应参数未传值时才会计算并分配")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// f1、a")]),t._v("\n")])])]),a("p",[t._v("要"),a("code",[t._v("return")]),t._v("的值必须跟"),a("code",[t._v("return")]),t._v("语句放在同一行，不能单独一行（内容中间可以换行，但不能"),a("code",[t._v("return")]),t._v("所在行后面无内容），否则"),a("code",[t._v("return")]),t._v("后面空内容会当做无返回值（因JS引擎会在"),a("code",[t._v("return")]),t._v("所在行末尾默认补上"),a("code",[t._v(";")]),t._v("分号）。")]),t._v(" "),a("p",[t._v("注释描述函数作用与用法：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 返回 x 的 n 次幂的值。\n *\n * @param {number} x 要改变的值\n * @param {number} n 幂数，必须是一个自然数\n * @return {number} x 的 n 次幂的值\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),a("p",[t._v("对象的属性名可以是任何字符串或"),a("code",[t._v("Symbol")]),t._v("，其他类型会被自动转换为字符串。若通过点符号"),a("code",[t._v(".")]),t._v("访问对象的"),a("code",[t._v("key")]),t._v("(即属性或方法)时，则要求"),a("code",[t._v("key")]),t._v("是有效的变量标识符，即意味着：不包含空格、不以数字开头、也不包含特殊字符(除"),a("code",[t._v("$")]),t._v("和"),a("code",[t._v("_")]),t._v(")，而中括号"),a("code",[t._v("[]")]),t._v("方式访问"),a("code",[t._v("key")]),t._v("则没有这些要求，且中括号中还可以结合表达式使用，能力更强。")]),t._v(" "),a("p",[a("code",[t._v("in")]),t._v("操作符可判断对象上是否存在某属性："),a("code",[t._v("prop in obj")]),t._v("返回布尔值，但其会查找原型链，而不只是其自身属性。")]),t._v(" "),a("p",[a("code",[t._v("for...in...")]),t._v("遍历对象的所有非"),a("code",[t._v("Symbol")]),t._v("且可枚举的"),a("code",[t._v("key")]),t._v("(包括继承而来的)，可使用"),a("code",[t._v("obj.hasOwnProperty(key)")]),t._v("判断该"),a("code",[t._v("key")]),t._v("是否是该对象自身的。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("Object.assign")]),t._v("实现的对象拷贝是浅拷贝：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将后面(一个或多个)对象的属性拷贝给目标对象 targetObj，并返回 targetObj 的引用")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("targetObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("srcObj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" srcObj2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"对象中的this-new"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象中的this-new"}},[t._v("#")]),t._v(" 对象中的this/new")]),t._v(" "),a("p",[t._v("对象方法中的"),a("code",[t._v("this")]),t._v("指向点"),a("code",[t._v(".")]),t._v("之前的这个对象，也即调用该方法的对象。")]),t._v(" "),a("p",[a("code",[t._v("this")]),t._v("的值是在代码运行时计算出来的，它取决于调用代码上下文，而非定义时的上下文，箭头函数中没有自己的"),a("code",[t._v("this")]),t._v("，其"),a("code",[t._v("this")]),t._v("取决于外部父级作用域。")]),t._v(" "),a("p",[t._v("当一个函数被使用 new 操作符执行时，它按照以下步骤：")]),t._v(" "),a("ol",[a("li",[t._v("一个新的空对象被创建并分配给"),a("code",[t._v("this")]),t._v("（隐式创建）")]),t._v(" "),a("li",[t._v("函数体执行，通常它会修改"),a("code",[t._v("this")]),t._v("，为其添加新的属性")]),t._v(" "),a("li",[t._v("返回"),a("code",[t._v("this")]),t._v("的值（隐式返回）")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isAdmin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数内部可以通过 new.target 属性检查其是否被使用 new 进行调用，常规调用返回 undefined，new 调用会返回该函数自身")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若是常规调用，我们也可以让其实际按 new 调用，在封装插件时可以使暴露的调用语法更加灵活")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 new User(...) 时做的事就类似下面这样")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this = {}; (隐式创建)")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isAdmin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// return this; (隐式返回)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("从技术上讲，任何函数（除了箭头函数，它没有自己的"),a("code",[t._v("this")]),t._v("）都可以用作构造器。即可以通过"),a("code",[t._v("new")]),t._v("来运行，它会执行上面的算法。“首字母大写”是一个共同的约定(并非强制)，以明确表示一个函数将被使用"),a("code",[t._v("new")]),t._v("来运行。")]),t._v(" "),a("p",[t._v("若我们有许多行用于创建单个复杂对象的代码，我们可以将它们封装在一个立即调用的构造函数中。立即调用的构造函数不能被再次调用，因为它不保存在任何地方，只是被创建和调用，该技巧旨在封装构建单个对象的代码，而无需将来重用。像下面这样：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个函数并立即使用 new 调用它")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isAdmin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// more code")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"构造器的-return"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造器的-return"}},[t._v("#")]),t._v(" 构造器的 return")]),t._v(" "),a("p",[a("strong",[t._v("通常，构造器没有"),a("code",[t._v("return")]),t._v("语句")]),t._v("。它们的任务是将所有必要的东西写入"),a("code",[t._v("this")]),t._v("，并自动转换为结果。但是，如果包含了"),a("code",[t._v("return")]),t._v(" 语句，那么规则如下：")]),t._v(" "),a("ul",[a("li",[t._v("如果"),a("code",[t._v("return")]),t._v("返回的是一个"),a("strong",[t._v("对象，则返回这个对象")]),t._v("，而不是"),a("code",[t._v("this")]),t._v("；")]),t._v(" "),a("li",[t._v("如果"),a("code",[t._v("return")]),t._v("返回的是一个"),a("strong",[t._v("原始类型，则忽略")]),t._v("，默认转为返回"),a("code",[t._v("this")]),t._v("；")])]),t._v(" "),a("p",[t._v("换句话说，带有对象的"),a("code",[t._v("return")]),t._v("返回该对象，在所有其他情况下(包括无"),a("code",[t._v("return")]),t._v("语句或"),a("code",[t._v("return")]),t._v("后无任何内容)都自动转为返回"),a("code",[t._v("this")]),t._v("。")]),t._v(" "),a("p",[t._v("如果构造函数没有参数，则实例化时也是可以省略后面的括号"),a("code",[t._v("()")]),t._v("的，虽然规范允许但这不是一个好的使用习惯：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无参数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等同于")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"可选链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可选链"}},[t._v("#")]),t._v(" 可选链 ?.")]),t._v(" "),a("p",[t._v("可选链"),a("code",[t._v("?.")]),t._v("用于其前面的值可能为"),a("code",[t._v("undefined")]),t._v("或"),a("code",[t._v("null")]),t._v("的情况(也即是所访问属性或方法是可选的)，符合情况时其会停止运算(语句剩下的调用部分不执行，即短路效应)并返回"),a("code",[t._v("undefined")]),t._v("，否则按照常规逻辑执行。")]),t._v(" "),a("p",[t._v("使用可选链的"),a("strong",[t._v("变量一定要是声明过的或者是函数的参数")]),t._v("，否则会报错。也不要过渡使用可选链，而应该只用在一些东西允许不存在的地方，也即是所访问属性允许可选的情况。")]),t._v(" "),a("p",[t._v("可选链"),a("code",[t._v("?.")]),a("strong",[t._v("不是一个运算符")]),t._v("，而是一个"),a("strong",[t._v("特殊的语法结构")]),t._v("，故其还"),a("strong",[t._v("可以与函数和方括号一起使用")]),t._v("。")]),t._v(" "),a("p",[t._v("可以使用可选链"),a("code",[t._v("?.")]),t._v("来安全地读取或删除，但"),a("code",[t._v("?.")]),t._v("不能用在写入中，也即不能用在赋值语句的左侧。")]),t._v(" "),a("p",[t._v("因数字、字符串、布尔值有包装对象，故也可像对象调用一些属性或方法，"),a("strong",[t._v("但数字只能通过变量或对象属性存储方式调用")]),t._v("，或者用括号"),a("code",[t._v("()")]),t._v("包裹，否则会报错："),a("code",[t._v("let n=7; n.a")]),t._v("不报错、"),a("code",[t._v("7.a")]),t._v("报错、"),a("code",[t._v("(7).a")]),t._v("不报错。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("prop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错，因为使用可选链的变量未声明")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" prop1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("prop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined，这里与直接 obj.prop 差不多")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("ziprop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined，这里就体现出可选链的作用了")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("ziprop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined，因这里 obj.prop1 不为 undefined 或 null，则 obj.prop1?.ziprop === obj.prop1.ziprop")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("zz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined，表示 prop1 可选，prop1 下的 z 也是可选的")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined，表示 prop 可选，prop 下的 z 也是可选的")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" html "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.el'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("innerHTML"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果没有找到符合的元素，则会返回 undefined，若不使用可选链则元素不存在时访问 innerHTML 就会报错")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// obj2 为 null，故这里后面的 foo() 部分不会执行")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ?. 并非一个运算符，而是一个特殊的语法结构，故其后可以紧跟函数调用`()`或属性访问`[]`")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不会报错，因为 obj.foo 为 undefined，则后面的`()`不会继续执行，也就不会形成方法调用")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child-prop'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不会报错，若 obj.foo 不为 undefined 或 null，则结果等于 obj.foo['child-prop']，否则为 undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与 delete 一起使用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" obj2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("prop "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错，可选链不能用于赋值操作左侧")]),t._v("\n")])])]),a("p",[t._v("总结可选链"),a("code",[t._v("?.")]),t._v("的三种使用形式：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("obj?.prop")]),t._v("，最常见的形式；")]),t._v(" "),a("li",[a("code",[t._v("obj?.[prop]")]),t._v("，对象的中括号访问语法，有效则返回"),a("code",[t._v("obj[prop]")]),t._v("，否则返回"),a("code",[t._v("undefined")]),t._v("；")]),t._v(" "),a("li",[a("code",[t._v("obj.method?.()")]),t._v("，若有效则调用"),a("code",[t._v("obj.method()")]),t._v("，否则返回"),a("code",[t._v("undefined")]),t._v("；")])]),t._v(" "),a("h2",{attrs:{id:"symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[t._v("#")]),t._v(" Symbol")]),t._v(" "),a("p",[t._v("只有两种原始数据类型可用于对象的属性或方法名中，一种就是一直都存在的字符串(其他的会自动转为字符串)，另一种就是新增的表示唯一标识符的"),a("code",[t._v("Symbol")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 Symbol")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sym "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以不传任何参数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sym1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'id'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以传入一个描述该Symbol的名字，调试代码时较有用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sym2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'id'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 即使传入同样的Symbol名，得到的值也是不一样的")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sym1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" sym2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 传入 Symbol 的描述信息可以通过其 description 属性获取到")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sym1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("description"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// id")]),t._v("\n")])])]),a("p",[t._v("Symbol 不会被自动隐式转换为字符串，JS中大多数值都支持字符串的隐式转换，如我们可以"),a("code",[t._v("alert")]),t._v("任何值都生效(只是有的显示形式不一样，就是被进行了隐式字符串转换)，但 Symbol 就比较特殊，它若被隐式进行自动转换就会报错，如"),a("code",[t._v("alert(Symbol('id'))")]),t._v("就会报错 "),a("span",{staticClass:"color-danger"},[t._v("Uncaught TypeError: Cannot convert a Symbol value to a string")])]),t._v(" "),a("p",[t._v("若实在要显示 Symbol 的字符串形式，可以显式调用其"),a("code",[t._v("toString()")]),t._v("方法：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sym1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 弹出 Symbol(id)")]),t._v("\n")])])]),a("h4",{attrs:{id:"使用symbol创建隐藏属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用symbol创建隐藏属性"}},[t._v("#")]),t._v(" 使用Symbol创建隐藏属性")]),t._v(" "),a("p",[t._v("用 Symbol 创建对象 obj 的属性可以使得该属性对外是隐藏的，因为只有在编写代码时通过变量 key 保存了该 Symbol 作为的键名，才能在后续通过这个变量 key 访问该 Symbol 对应的键值，显然我们对外不暴露这个 key 变量时，外部也就不知道如何访问这个 Symbol 键名对应的值，因为 Symbol 也只有通过存储它的变量来使用才有意义(保证每次用的 Symbol 是同一个值)，否则每次直接调用实际都会是一个新的唯一值。")])])}),[],!1,null,null,null);s.default=e.exports}}]);
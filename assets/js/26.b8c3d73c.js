(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{440:function(t,s,a){"use strict";a.r(s);var n=a(25),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js零散集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js零散集"}},[t._v("#")]),t._v(" JS零散集")]),t._v(" "),a("h3",{attrs:{id:"值的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#值的比较"}},[t._v("#")]),t._v(" 值的比较")]),t._v(" "),a("p",[t._v("常见比较运算符："),a("code",[t._v(">")]),t._v("、"),a("code",[t._v("<")]),t._v("、"),a("code",[t._v(">=")]),t._v("、"),a("code",[t._v("<=")]),t._v("、"),a("code",[t._v("==")]),t._v("、"),a("code",[t._v("===")]),t._v("、"),a("code",[t._v("!=")]),t._v("、"),a("code",[t._v("!==")])]),t._v(" "),a("ul",[a("li",[t._v("当对不同类型的值进行比较时，它们会先被转化为数字（除"),a("code",[t._v("===")]),t._v("和"),a("code",[t._v("!==")]),t._v("）再进行比较，"),a("code",[t._v("null")]),t._v("被转化为"),a("code",[t._v("0")]),t._v("，注意"),a("code",[t._v("undefined")]),t._v("被转化为"),a("code",[t._v("NaN")]),t._v("，"),a("code",[t._v("NaN")]),t._v("与自身也不相等")]),t._v(" "),a("li",[t._v("在非严格相等"),a("code",[t._v("==")]),t._v("下，"),a("code",[t._v("null")]),t._v("和"),a("code",[t._v("undefined")]),t._v("相等且各自不等于任何其他非自身的值")]),t._v(" "),a("li",[t._v("字符串的比较，会按照“字母表”顺序逐字符地比较大小(实际是Unicode编码的大小)，后面的字母大于前面的，小写字母大于大写字母")]),t._v(" "),a("li",[t._v("在使用"),a("code",[t._v(">")]),t._v("或"),a("code",[t._v("<")]),t._v("进行比较时，需要注意变量可能为"),a("code",[t._v("null/undefined")]),t._v("的情况，比较好的方法是单独检查变量是否等于"),a("code",[t._v("null/undefined")])])]),t._v(" "),a("p",[t._v("与运算"),a("code",[t._v("&&")]),t._v("和或运算"),a("code",[t._v("||")]),t._v("返回的都是运算结果的原始值，而不是转换为布尔值，与运算"),a("code",[t._v("&&")]),t._v("优先级比或运算"),a("code",[t._v("||")]),t._v("高。")]),t._v(" "),a("p",[a("code",[t._v("++i/--i")]),t._v("与"),a("code",[t._v("i++/i--")]),t._v("区别：前者是先自增/自减后的新结果参与所在代码块运算，而后者是先参与所在代码块运算后再进行自增/自减，其新结果得下次才能使用到，若单独使用而不参与循环代码块运算或在循环代码块之外使用时两者结果一样。")]),t._v(" "),a("p",[t._v("非表达式的语法结构不能与三元运算符"),a("code",[t._v("? :")]),t._v("一起使用，如"),a("code",[t._v("break")]),t._v("、"),a("code",[t._v("continue")]),t._v("语句。")]),t._v(" "),a("p",[a("code",[t._v("break")]),t._v("用于中止当前循环(不包括数组的"),a("code",[t._v("forEach")]),t._v(")、"),a("code",[t._v("switch")]),t._v("语句或"),a("code",[t._v("label")]),t._v("标记语句，并把程序控制流转到紧接着被中止语句后面的语句，注意其只能用于最小作用域是前面三种环境下，否则将抛出语法错误，比如数组的"),a("code",[t._v("forEach")]),t._v("，其参数是个函数，若最小代码块是该函数则break是不生效的，不会跳出该函数。")]),t._v(" "),a("p",[a("code",[t._v("label")]),t._v("标记语句所有浏览器都支持，包括低版本IE。")]),t._v(" "),a("p",[t._v("当要跳出多层循环时，可以使用"),a("code",[t._v("label")]),t._v("标记语句来跳出标记的代码块（当然我们也可以重构，将内层循环提取到一个新的函数中），如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("outer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("prompt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("坐标 (")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果是空字符串或被取消，则中断并跳出这两个循环。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" outer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 跳出指定的outer标记代码块，相当于直接跳出了两层循环，若不指定标记，则只是跳出当前的内层循环")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用得到的值做些事……")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("continue")]),t._v("则是跳过当前这一次循环体后面剩下的内容，而继续下一次循环，其也可以使用标记来实现多层循环中进入外层循环的下一次循环，而跳过内部循环中剩下的循环。")]),t._v(" "),a("p",[a("code",[t._v("label")]),t._v("标记语句语法就是在一条语句前面加一个自命名的标识符和冒号(也可单独一行)，标记可以是任意代码块，并非只能用于循环，但也只有"),a("code",[t._v("break")]),t._v("语句可以使用非循环标记，"),a("code",[t._v("continue")]),t._v("只能在循环中使用标记，如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("outer_block"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  inner_block"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" outer_block"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 跳出outer_block标记块")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 跳过")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 跳过")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("函数参数中的默认值可以是任何表达式，且其只会在缺少参数传入时才会被计算和分配，而非声明时就计算和分配。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'f1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的 f1 在声明参数 a 时并不会立即执行和分配结果给 a")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以下输出结果对比也说明默认值表达式只会在对应参数未传值时才会计算并分配")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// f1、a")]),t._v("\n")])])]),a("p",[t._v("要"),a("code",[t._v("return")]),t._v("的值必须跟"),a("code",[t._v("return")]),t._v("语句放在同一行，不能单独一行（可以换行，但不能"),a("code",[t._v("return")]),t._v("所在行后面无内容），否则"),a("code",[t._v("return")]),t._v("后面空内容会当做无返回值（因JS引擎会在"),a("code",[t._v("return")]),t._v("所在行末尾默认补上"),a("code",[t._v(";")]),t._v("分号）。")])])}),[],!1,null,null,null);s.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{458:function(t,e,s){"use strict";s.r(e);var a=s(18),o=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"proxy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#proxy"}},[t._v("#")]),t._v(" Proxy")]),t._v(" "),s("p",[s("code",[t._v("Proxy")]),t._v("用于拦截修改目标对象某些行为的默认操作，类似 ES5 中"),s("code",[t._v("Object.defineProperty")]),t._v("的效果，但可拦截的内容更多，不止"),s("code",[t._v("get/set")]),t._v("操作，且"),s("code",[t._v("Proxy")]),t._v("是对返回的代理对象操作才会触发拦截，不像"),s("code",[t._v("Object.defineProperty")]),t._v("是直接操作原目标对象触发拦截。")]),t._v(" "),s("p",[t._v("语法：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数1 target 为要拦截的目标对象（可以是任何东西，包括函数）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数2 handler 为要拦截的具体操作配置对象，以拦截的行为和对应的处理函数组成，若 handler 是个空对象（即没有任何拦截），则对 proxy 和 target 的操作是同步的（但仍不是同一个对象）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回一个 Proxy 实例(一个新代理对象)，后续所有操作需要在该新对象上进行才会触发拦截操作")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" proxy "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后面提到的`proxy`都表示一个实例对象")]),t._v("\n")])])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("ul",[s("li",[t._v("要使得"),s("code",[t._v("Proxy")]),t._v("起作用，必须针对返回的"),s("code",[t._v("Proxy")]),t._v("实例"),s("code",[t._v("proxy")]),t._v("对象进行操作，而不是对原目标对象"),s("code",[t._v("target")]),t._v("进行操作；")]),t._v(" "),s("li",[t._v("对于拦截配置对象"),s("code",[t._v("handler")]),t._v("中可以设置但未设置拦截的操作，则默认落在原目标对象"),s("code",[t._v("target")]),t._v("上，按照原先的方式产生结果；")]),t._v(" "),s("li",[t._v("若拦截配置对象"),s("code",[t._v("handler")]),t._v("是个空对象（即没有任何拦截），那么对"),s("code",[t._v("proxy")]),t._v("和"),s("code",[t._v("target")]),t._v("的所有操作都是同步的，但仍是两个不同的对象；")])])]),t._v(" "),s("p",[s("code",[t._v("proxy")]),t._v(" 对象可以设置到其他对象的属性上，也可以作为其他对象的原型对象。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" proxy"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" proxy "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 放在其他对象属性中")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proxy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作为其他对象的原型对象")]),t._v("\n")])])]),s("p",[s("code",[t._v("Proxy")]),t._v(" 支持拦截的操作有如下 13 种：")]),t._v(" "),s("p",[s("code",[t._v("get")]),t._v("、"),s("code",[t._v("set")]),t._v("、"),s("code",[t._v("has")]),t._v("、"),s("code",[t._v("deleteProperty")]),t._v("、"),s("code",[t._v("ownKeys")]),t._v("、"),s("code",[t._v("getOwnPropertyDescriptor")]),t._v("、"),s("code",[t._v("defineProperty")]),t._v("、"),s("code",[t._v("preventExtensions")]),t._v("、"),s("code",[t._v("getPrototypeOf")]),t._v("、"),s("code",[t._v("isExtensible")]),t._v("、"),s("code",[t._v("setPrototypeOf")]),t._v("、"),s("code",[t._v("apply")]),t._v("、"),s("code",[t._v("construct")])]),t._v(" "),s("p",[t._v("以下拦截处理器中形参说明：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("target")]),t._v("，原始目标对象（"),s("code",[t._v("apply")]),t._v("和"),s("code",[t._v("construct")]),t._v("中为函数）")]),t._v(" "),s("li",[s("code",[t._v("propKey")]),t._v("，目标属性(键)名")]),t._v(" "),s("li",[s("code",[t._v("receiver")]),t._v("，当前 proxy 实例对象")]),t._v(" "),s("li",[s("code",[t._v("value")]),t._v("，设置的值")])]),t._v(" "),s("p",[t._v("具体作用：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("get(target, propKey, receiver)")]),t._v(" 拦截对象下的属性访问，包括没有的属性")]),t._v(" "),s("li",[s("code",[t._v("set(target, propKey, value, receiver)")]),t._v(" 拦截对象下的属性的设置，包括新增属性，返回一个布尔值")]),t._v(" "),s("li",[s("code",[t._v("has(target, propKey, value, receiver)")]),t._v(" 拦截 "),s("code",[t._v("propKey in proxy")]),t._v(" 操作，返回一个布尔值")]),t._v(" "),s("li",[s("code",[t._v("deleteProperty(target, propKey)")]),t._v(" 拦截 "),s("code",[t._v("delete proxy[propKey]")]),t._v(" 操作，返回一个布尔值")]),t._v(" "),s("li",[s("code",[t._v("ownKeys(target)")]),t._v(" 拦截以下操作，返回一个数组。该方法返回目标对象"),s("strong",[t._v("所有自身属性")]),t._v("的属性名，而 "),s("code",[t._v("Object.keys/values()")]),t._v(" 的返回结果仅包括目标对象自身的"),s("strong",[t._v("可遍历且非 symbol 属性/值")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Object.getOwnPropertyNames(proxy)")]),t._v("，返回非 symbol 键")]),t._v(" "),s("li",[s("code",[t._v("Object.getOwnPropertySymbols(proxy)")]),t._v("，返回 symbol 键")]),t._v(" "),s("li",[s("code",[t._v("Object.keys(proxy)")]),t._v("，返回目标对象自身的"),s("strong",[t._v("可遍历且非 symbol 键")])]),t._v(" "),s("li",[s("code",[t._v("Object.values(proxy)")]),t._v("，返回目标对象自身的"),s("strong",[t._v("可遍历且非 symbol 值")])]),t._v(" "),s("li",[s("code",[t._v("Object.entries(proxy)")])]),t._v(" "),s("li",[s("code",[t._v("for...in")]),t._v(" 循环，遍历所有带有 enumerable 标志(即可遍历)的非 symbol 键，以及原型对象的键")])])]),t._v(" "),s("li",[s("code",[t._v("getOwnPropertyDescriptor(target, propKey)")]),t._v(" 拦截 "),s("code",[t._v("Object.getOwnPropertyDescriptor(proxy, propKey)")]),t._v("，返回属性的描述对象")]),t._v(" "),s("li",[s("code",[t._v("defineProperty(target, propKey, propDesc)")]),t._v(" 拦截以下操作，返回一个布尔值\n"),s("ul",[s("li",[s("code",[t._v("Object.defineProperty(proxy, propKey, propDesc)")])]),t._v(" "),s("li",[s("code",[t._v("Object.defineProperties(proxy, propDescs)")])])])]),t._v(" "),s("li",[s("code",[t._v("getPrototypeOf(target)")]),t._v(" 拦截 "),s("code",[t._v("Object.getPrototypeOf(proxy)")]),t._v("，返回一个对象")]),t._v(" "),s("li",[s("code",[t._v("setPrototypeOf(target, proto)")]),t._v(" 拦截 "),s("code",[t._v("Object.setPrototypeOf(proxy, proto)")]),t._v("，返回一个布尔值")]),t._v(" "),s("li",[s("code",[t._v("preventExtensions(target)")]),t._v(" 拦截 "),s("code",[t._v("Object.preventExtensions(proxy)")]),t._v("，返回一个布尔值")]),t._v(" "),s("li",[s("code",[t._v("isExtensible(target)")]),t._v(" 拦截 "),s("code",[t._v("Object.isExtensible(proxy)")]),t._v("，返回一个布尔值")]),t._v(" "),s("li",[s("code",[t._v("apply(target, object, args)")]),t._v(" 拦截 "),s("code",[t._v("Proxy")]),t._v(" 实例作为函数调用的操作（此时"),s("code",[t._v("target")]),t._v(" 应该是一个函数），比如 "),s("code",[t._v("proxy(...args)")]),t._v("、"),s("code",[t._v("proxy.call(object, ...args)")]),t._v("、"),s("code",[t._v("proxy.apply(...)")])]),t._v(" "),s("li",[s("code",[t._v("construct(target, args)")]),t._v(" 拦截 "),s("code",[t._v("Proxy")]),t._v(" 实例作为构造函数调用的操作（此时"),s("code",[t._v("target")]),t._v(" 应该是一个构造函数），比如 "),s("code",[t._v("new proxy(...args)")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" proxy "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" propKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数1 target 为代理的原目标对象")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数2 propKey 为访问的属性名")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'拦截处理值'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("代理应该在所有地方都完全替代目标对象，目标对象被代理后，任何人都不应该再引用目标对象，否则很容易出意料之外的问题，可以使用如下变量覆盖方式来避免该问题：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 覆盖原目标对象，使得后续访问的 obj 变量实际都是代理后的对象")]),t._v("\nobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])}),[],!1,null,null,null);e.default=o.exports}}]);